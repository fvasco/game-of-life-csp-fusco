--- Execution profile ---
Total samples       : 46367
unknown_Java        : 163 (0.35%)

--- 16878819210 ns (3.64%), 1687 samples
  [ 0] Cell.lambda$notifyLiveness$0
  [ 1] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 2] ArrayList.forEach
  [ 3] Cell.notifyLiveness
  [ 4] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-6 tid=125798]

--- 16840296228 ns (3.63%), 1683 samples
  [ 0] Cell.lambda$notifyLiveness$0
  [ 1] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 2] ArrayList.forEach
  [ 3] Cell.notifyLiveness
  [ 4] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-7 tid=125799]

--- 16119010627 ns (3.47%), 1611 samples
  [ 0] Cell.lambda$notifyLiveness$0
  [ 1] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 2] ArrayList.forEach
  [ 3] Cell.notifyLiveness
  [ 4] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-8 tid=125800]

--- 15868979421 ns (3.42%), 1586 samples
  [ 0] Cell.lambda$notifyLiveness$0
  [ 1] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 2] ArrayList.forEach
  [ 3] Cell.notifyLiveness
  [ 4] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-5 tid=125797]

--- 15568488914 ns (3.36%), 1556 samples
  [ 0] Cell.lambda$notifyLiveness$0
  [ 1] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 2] ArrayList.forEach
  [ 3] Cell.notifyLiveness
  [ 4] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-4 tid=125796]

--- 14787692675 ns (3.19%), 1478 samples
  [ 0] Cell.lambda$notifyLiveness$0
  [ 1] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 2] ArrayList.forEach
  [ 3] Cell.notifyLiveness
  [ 4] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-3 tid=125795]

--- 14596241441 ns (3.15%), 1459 samples
  [ 0] Cell.lambda$notifyLiveness$0
  [ 1] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 2] ArrayList.forEach
  [ 3] Cell.notifyLiveness
  [ 4] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-2 tid=125794]

--- 9106735951 ns (1.96%), 909 samples
  [ 0] Dimensions.forEachRowCol
  [ 1] ChannelsGrid.forEachChannel
  [ 2] TickPerCell.tick
  [ 3] GameOfLife.calculateFrame
  [ 4] GameOfLife.lambda$calculateFrameBlocking$4
  [ 5] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [ 6] ThreadPoolExecutor.runWorker
  [ 7] ThreadPoolExecutor$Worker.run
  [ 8] Thread.run
  [ 9] [Thread-9 tid=125801]

--- 5892427533 ns (1.27%), 589 samples
  [ 0] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 1] ReferencePipeline$3$1.accept
  [ 2] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 3] AbstractPipeline.copyInto
  [ 4] AbstractPipeline.wrapAndCopyInto
  [ 5] ReduceOps$ReduceOp.evaluateSequential
  [ 6] AbstractPipeline.evaluate
  [ 7] IntPipeline.reduce
  [ 8] IntPipeline.sum
  [ 9] Cell.calculateNextState
  [10] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-2 tid=125794]

--- 5732271953 ns (1.24%), 573 samples
  [ 0] ReduceOps$5ReducingSink.get
  [ 1] ReduceOps$5ReducingSink.get
  [ 2] ReduceOps$ReduceOp.evaluateSequential
  [ 3] AbstractPipeline.evaluate
  [ 4] IntPipeline.reduce
  [ 5] IntPipeline.sum
  [ 6] Cell.calculateNextState
  [ 7] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-3 tid=125795]

--- 5661842497 ns (1.22%), 566 samples
  [ 0] ReduceOps$5ReducingSink.get
  [ 1] ReduceOps$5ReducingSink.get
  [ 2] ReduceOps$ReduceOp.evaluateSequential
  [ 3] AbstractPipeline.evaluate
  [ 4] IntPipeline.reduce
  [ 5] IntPipeline.sum
  [ 6] Cell.calculateNextState
  [ 7] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-2 tid=125794]

--- 5362571013 ns (1.16%), 536 samples
  [ 0] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 1] ReferencePipeline$3$1.accept
  [ 2] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 3] AbstractPipeline.copyInto
  [ 4] AbstractPipeline.wrapAndCopyInto
  [ 5] ReduceOps$ReduceOp.evaluateSequential
  [ 6] AbstractPipeline.evaluate
  [ 7] IntPipeline.reduce
  [ 8] IntPipeline.sum
  [ 9] Cell.calculateNextState
  [10] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-3 tid=125795]

--- 5282369838 ns (1.14%), 528 samples
  [ 0] ReduceOps$5ReducingSink.get
  [ 1] ReduceOps$5ReducingSink.get
  [ 2] ReduceOps$ReduceOp.evaluateSequential
  [ 3] AbstractPipeline.evaluate
  [ 4] IntPipeline.reduce
  [ 5] IntPipeline.sum
  [ 6] Cell.calculateNextState
  [ 7] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-5 tid=125797]

--- 5141723293 ns (1.11%), 514 samples
  [ 0] ReduceOps$5ReducingSink.get
  [ 1] ReduceOps$5ReducingSink.get
  [ 2] ReduceOps$ReduceOp.evaluateSequential
  [ 3] AbstractPipeline.evaluate
  [ 4] IntPipeline.reduce
  [ 5] IntPipeline.sum
  [ 6] Cell.calculateNextState
  [ 7] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-6 tid=125798]

--- 5042098099 ns (1.09%), 504 samples
  [ 0] ReduceOps$5ReducingSink.get
  [ 1] ReduceOps$5ReducingSink.get
  [ 2] ReduceOps$ReduceOp.evaluateSequential
  [ 3] AbstractPipeline.evaluate
  [ 4] IntPipeline.reduce
  [ 5] IntPipeline.sum
  [ 6] Cell.calculateNextState
  [ 7] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-7 tid=125799]

--- 4911922044 ns (1.06%), 491 samples
  [ 0] ReduceOps$5ReducingSink.get
  [ 1] ReduceOps$5ReducingSink.get
  [ 2] ReduceOps$ReduceOp.evaluateSequential
  [ 3] AbstractPipeline.evaluate
  [ 4] IntPipeline.reduce
  [ 5] IntPipeline.sum
  [ 6] Cell.calculateNextState
  [ 7] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-4 tid=125796]

--- 4911699254 ns (1.06%), 491 samples
  [ 0] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 1] ReferencePipeline$3$1.accept
  [ 2] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 3] AbstractPipeline.copyInto
  [ 4] AbstractPipeline.wrapAndCopyInto
  [ 5] ReduceOps$ReduceOp.evaluateSequential
  [ 6] AbstractPipeline.evaluate
  [ 7] IntPipeline.reduce
  [ 8] IntPipeline.sum
  [ 9] Cell.calculateNextState
  [10] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-6 tid=125798]

--- 4811925260 ns (1.04%), 481 samples
  [ 0] ReduceOps$5ReducingSink.get
  [ 1] ReduceOps$5ReducingSink.get
  [ 2] ReduceOps$ReduceOp.evaluateSequential
  [ 3] AbstractPipeline.evaluate
  [ 4] IntPipeline.reduce
  [ 5] IntPipeline.sum
  [ 6] Cell.calculateNextState
  [ 7] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-8 tid=125800]

--- 4722007808 ns (1.02%), 472 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue$Node.casItem
  [ 3] LinkedTransferQueue$Node.tryMatch
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 9] ReferencePipeline$3$1.accept
  [10] ArrayList$ArrayListSpliterator.forEachRemaining
  [11] AbstractPipeline.copyInto
  [12] AbstractPipeline.wrapAndCopyInto
  [13] ReduceOps$ReduceOp.evaluateSequential
  [14] AbstractPipeline.evaluate
  [15] IntPipeline.reduce
  [16] IntPipeline.sum
  [17] Cell.calculateNextState
  [18] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [19] Iterable.forEach
  [20] CellsGroup.run
  [21] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [22] ThreadPoolExecutor.runWorker
  [23] ThreadPoolExecutor$Worker.run
  [24] Thread.run
  [25] [Thread-5 tid=125797]

--- 4712060494 ns (1.02%), 471 samples
  [ 0] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 1] ReferencePipeline$3$1.accept
  [ 2] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 3] AbstractPipeline.copyInto
  [ 4] AbstractPipeline.wrapAndCopyInto
  [ 5] ReduceOps$ReduceOp.evaluateSequential
  [ 6] AbstractPipeline.evaluate
  [ 7] IntPipeline.reduce
  [ 8] IntPipeline.sum
  [ 9] Cell.calculateNextState
  [10] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-4 tid=125796]

--- 4481667148 ns (0.97%), 448 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue$Node.casItem
  [ 3] LinkedTransferQueue$Node.tryMatch
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 9] ReferencePipeline$3$1.accept
  [10] ArrayList$ArrayListSpliterator.forEachRemaining
  [11] AbstractPipeline.copyInto
  [12] AbstractPipeline.wrapAndCopyInto
  [13] ReduceOps$ReduceOp.evaluateSequential
  [14] AbstractPipeline.evaluate
  [15] IntPipeline.reduce
  [16] IntPipeline.sum
  [17] Cell.calculateNextState
  [18] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [19] Iterable.forEach
  [20] CellsGroup.run
  [21] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [22] ThreadPoolExecutor.runWorker
  [23] ThreadPoolExecutor$Worker.run
  [24] Thread.run
  [25] [Thread-4 tid=125796]

--- 4451932816 ns (0.96%), 445 samples
  [ 0] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 1] ReferencePipeline$3$1.accept
  [ 2] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 3] AbstractPipeline.copyInto
  [ 4] AbstractPipeline.wrapAndCopyInto
  [ 5] ReduceOps$ReduceOp.evaluateSequential
  [ 6] AbstractPipeline.evaluate
  [ 7] IntPipeline.reduce
  [ 8] IntPipeline.sum
  [ 9] Cell.calculateNextState
  [10] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-7 tid=125799]

--- 4411289021 ns (0.95%), 441 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue$Node.casItem
  [ 3] LinkedTransferQueue$Node.tryMatch
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 9] ReferencePipeline$3$1.accept
  [10] ArrayList$ArrayListSpliterator.forEachRemaining
  [11] AbstractPipeline.copyInto
  [12] AbstractPipeline.wrapAndCopyInto
  [13] ReduceOps$ReduceOp.evaluateSequential
  [14] AbstractPipeline.evaluate
  [15] IntPipeline.reduce
  [16] IntPipeline.sum
  [17] Cell.calculateNextState
  [18] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [19] Iterable.forEach
  [20] CellsGroup.run
  [21] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [22] ThreadPoolExecutor.runWorker
  [23] ThreadPoolExecutor$Worker.run
  [24] Thread.run
  [25] [Thread-6 tid=125798]

--- 4391503579 ns (0.95%), 439 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue$Node.casItem
  [ 3] LinkedTransferQueue$Node.tryMatch
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 9] ReferencePipeline$3$1.accept
  [10] ArrayList$ArrayListSpliterator.forEachRemaining
  [11] AbstractPipeline.copyInto
  [12] AbstractPipeline.wrapAndCopyInto
  [13] ReduceOps$ReduceOp.evaluateSequential
  [14] AbstractPipeline.evaluate
  [15] IntPipeline.reduce
  [16] IntPipeline.sum
  [17] Cell.calculateNextState
  [18] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [19] Iterable.forEach
  [20] CellsGroup.run
  [21] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [22] ThreadPoolExecutor.runWorker
  [23] ThreadPoolExecutor$Worker.run
  [24] Thread.run
  [25] [Thread-3 tid=125795]

--- 4388411644 ns (0.95%), 438 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] GameOfLife$$Lambda$53.0x0000000801036518.test
  [ 5] ChannelsGrid.lambda$forEachChannel$1
  [ 6] ChannelsGrid$$Lambda$54.0x0000000801036750.accept
  [ 7] Dimensions.forEachRowCol
  [ 8] ChannelsGrid.forEachChannel
  [ 9] GameOfLife.calculateFrame
  [10] GameOfLife.lambda$calculateFrameBlocking$4
  [11] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-9 tid=125801]

--- 4311730489 ns (0.93%), 431 samples
  [ 0] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 1] ReferencePipeline$3$1.accept
  [ 2] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 3] AbstractPipeline.copyInto
  [ 4] AbstractPipeline.wrapAndCopyInto
  [ 5] ReduceOps$ReduceOp.evaluateSequential
  [ 6] AbstractPipeline.evaluate
  [ 7] IntPipeline.reduce
  [ 8] IntPipeline.sum
  [ 9] Cell.calculateNextState
  [10] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-5 tid=125797]

--- 4261486132 ns (0.92%), 426 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue$Node.casItem
  [ 3] LinkedTransferQueue$Node.tryMatch
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 9] ReferencePipeline$3$1.accept
  [10] ArrayList$ArrayListSpliterator.forEachRemaining
  [11] AbstractPipeline.copyInto
  [12] AbstractPipeline.wrapAndCopyInto
  [13] ReduceOps$ReduceOp.evaluateSequential
  [14] AbstractPipeline.evaluate
  [15] IntPipeline.reduce
  [16] IntPipeline.sum
  [17] Cell.calculateNextState
  [18] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [19] Iterable.forEach
  [20] CellsGroup.run
  [21] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [22] ThreadPoolExecutor.runWorker
  [23] ThreadPoolExecutor$Worker.run
  [24] Thread.run
  [25] [Thread-7 tid=125799]

--- 4136599865 ns (0.89%), 413 samples
  [ 0] LinkedTransferQueue.skipDeadNodesNearHead
  [ 1] LinkedTransferQueue.xfer
  [ 2] LinkedTransferQueue.take
  [ 3] BlockingTransfer.take
  [ 4] Channel.take
  [ 5] GameOfLife$$Lambda$53.0x0000000801036518.test
  [ 6] ChannelsGrid.lambda$forEachChannel$1
  [ 7] ChannelsGrid$$Lambda$54.0x0000000801036750.accept
  [ 8] Dimensions.forEachRowCol
  [ 9] ChannelsGrid.forEachChannel
  [10] GameOfLife.calculateFrame
  [11] GameOfLife.lambda$calculateFrameBlocking$4
  [12] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-9 tid=125801]

--- 3991283847 ns (0.86%), 399 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue$Node.casItem
  [ 3] LinkedTransferQueue$Node.tryMatch
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 9] ReferencePipeline$3$1.accept
  [10] ArrayList$ArrayListSpliterator.forEachRemaining
  [11] AbstractPipeline.copyInto
  [12] AbstractPipeline.wrapAndCopyInto
  [13] ReduceOps$ReduceOp.evaluateSequential
  [14] AbstractPipeline.evaluate
  [15] IntPipeline.reduce
  [16] IntPipeline.sum
  [17] Cell.calculateNextState
  [18] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [19] Iterable.forEach
  [20] CellsGroup.run
  [21] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [22] ThreadPoolExecutor.runWorker
  [23] ThreadPoolExecutor$Worker.run
  [24] Thread.run
  [25] [Thread-2 tid=125794]

--- 3881500414 ns (0.84%), 388 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue$Node.casItem
  [ 3] LinkedTransferQueue$Node.tryMatch
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 9] ReferencePipeline$3$1.accept
  [10] ArrayList$ArrayListSpliterator.forEachRemaining
  [11] AbstractPipeline.copyInto
  [12] AbstractPipeline.wrapAndCopyInto
  [13] ReduceOps$ReduceOp.evaluateSequential
  [14] AbstractPipeline.evaluate
  [15] IntPipeline.reduce
  [16] IntPipeline.sum
  [17] Cell.calculateNextState
  [18] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [19] Iterable.forEach
  [20] CellsGroup.run
  [21] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [22] ThreadPoolExecutor.runWorker
  [23] ThreadPoolExecutor$Worker.run
  [24] Thread.run
  [25] [Thread-8 tid=125800]

--- 3751615590 ns (0.81%), 375 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.put
  [ 2] BlockingTransfer.put
  [ 3] Channel.put
  [ 4] Cell.calculateNextState
  [ 5] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 6] Iterable.forEach
  [ 7] CellsGroup.run
  [ 8] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 9] ThreadPoolExecutor.runWorker
  [10] ThreadPoolExecutor$Worker.run
  [11] Thread.run
  [12] [Thread-4 tid=125796]

--- 3731652548 ns (0.80%), 373 samples
  [ 0] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 1] ReferencePipeline$3$1.accept
  [ 2] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 3] AbstractPipeline.copyInto
  [ 4] AbstractPipeline.wrapAndCopyInto
  [ 5] ReduceOps$ReduceOp.evaluateSequential
  [ 6] AbstractPipeline.evaluate
  [ 7] IntPipeline.reduce
  [ 8] IntPipeline.sum
  [ 9] Cell.calculateNextState
  [10] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-8 tid=125800]

--- 3511502020 ns (0.76%), 351 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.put
  [ 2] BlockingTransfer.put
  [ 3] Channel.put
  [ 4] Cell.calculateNextState
  [ 5] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 6] Iterable.forEach
  [ 7] CellsGroup.run
  [ 8] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 9] ThreadPoolExecutor.runWorker
  [10] ThreadPoolExecutor$Worker.run
  [11] Thread.run
  [12] [Thread-5 tid=125797]

--- 3431470060 ns (0.74%), 343 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.put
  [ 2] BlockingTransfer.put
  [ 3] Channel.put
  [ 4] Cell.calculateNextState
  [ 5] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 6] Iterable.forEach
  [ 7] CellsGroup.run
  [ 8] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 9] ThreadPoolExecutor.runWorker
  [10] ThreadPoolExecutor$Worker.run
  [11] Thread.run
  [12] [Thread-3 tid=125795]

--- 3431365285 ns (0.74%), 343 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.put
  [ 2] BlockingTransfer.put
  [ 3] Channel.put
  [ 4] Cell.calculateNextState
  [ 5] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 6] Iterable.forEach
  [ 7] CellsGroup.run
  [ 8] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 9] ThreadPoolExecutor.runWorker
  [10] ThreadPoolExecutor$Worker.run
  [11] Thread.run
  [12] [Thread-6 tid=125798]

--- 3301293018 ns (0.71%), 330 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.put
  [ 2] BlockingTransfer.put
  [ 3] Channel.put
  [ 4] Cell.calculateNextState
  [ 5] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 6] Iterable.forEach
  [ 7] CellsGroup.run
  [ 8] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 9] ThreadPoolExecutor.runWorker
  [10] ThreadPoolExecutor$Worker.run
  [11] Thread.run
  [12] [Thread-2 tid=125794]

--- 3191218004 ns (0.69%), 319 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.put
  [ 2] BlockingTransfer.put
  [ 3] Channel.put
  [ 4] Cell.calculateNextState
  [ 5] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 6] Iterable.forEach
  [ 7] CellsGroup.run
  [ 8] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 9] ThreadPoolExecutor.runWorker
  [10] ThreadPoolExecutor$Worker.run
  [11] Thread.run
  [12] [Thread-7 tid=125799]

--- 3168206719 ns (0.68%), 316 samples
  [ 0] sched_yield
  [ 1] Thread.yield0
  [ 2] Thread.yield
  [ 3] LinkedTransferQueue.awaitMatch
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] GameOfLife$$Lambda$53.0x0000000801036518.test
  [ 9] ChannelsGrid.lambda$forEachChannel$1
  [10] ChannelsGrid$$Lambda$54.0x0000000801036750.accept
  [11] Dimensions.forEachRowCol
  [12] ChannelsGrid.forEachChannel
  [13] GameOfLife.calculateFrame
  [14] GameOfLife.lambda$calculateFrameBlocking$4
  [15] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [16] ThreadPoolExecutor.runWorker
  [17] ThreadPoolExecutor$Worker.run
  [18] Thread.run
  [19] [Thread-9 tid=125801]

--- 3154419291 ns (0.68%), 315 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue$Node.casItem
  [ 3] LinkedTransferQueue$Node.tryMatch
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] GameOfLife$$Lambda$53.0x0000000801036518.test
  [ 9] ChannelsGrid.lambda$forEachChannel$1
  [10] ChannelsGrid$$Lambda$54.0x0000000801036750.accept
  [11] Dimensions.forEachRowCol
  [12] ChannelsGrid.forEachChannel
  [13] GameOfLife.calculateFrame
  [14] GameOfLife.lambda$calculateFrameBlocking$4
  [15] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [16] ThreadPoolExecutor.runWorker
  [17] ThreadPoolExecutor$Worker.run
  [18] Thread.run
  [19] [Thread-9 tid=125801]

--- 3081042735 ns (0.66%), 308 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.put
  [ 2] BlockingTransfer.put
  [ 3] Channel.put
  [ 4] Cell.calculateNextState
  [ 5] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 6] Iterable.forEach
  [ 7] CellsGroup.run
  [ 8] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 9] ThreadPoolExecutor.runWorker
  [10] ThreadPoolExecutor$Worker.run
  [11] Thread.run
  [12] [Thread-8 tid=125800]

--- 2849987850 ns (0.61%), 284 samples
  [ 0] __schedule_[k]
  [ 1] schedule_[k]
  [ 2] __x64_sys_sched_yield_[k]
  [ 3] do_syscall_64_[k]
  [ 4] entry_SYSCALL_64_after_hwframe_[k]
  [ 5] sched_yield
  [ 6] Thread.yield0
  [ 7] Thread.yield
  [ 8] LinkedTransferQueue.awaitMatch
  [ 9] LinkedTransferQueue.xfer
  [10] LinkedTransferQueue.take
  [11] BlockingTransfer.take
  [12] Channel.take
  [13] GameOfLife$$Lambda$53.0x0000000801036518.test
  [14] ChannelsGrid.lambda$forEachChannel$1
  [15] ChannelsGrid$$Lambda$54.0x0000000801036750.accept
  [16] Dimensions.forEachRowCol
  [17] ChannelsGrid.forEachChannel
  [18] GameOfLife.calculateFrame
  [19] GameOfLife.lambda$calculateFrameBlocking$4
  [20] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [21] ThreadPoolExecutor.runWorker
  [22] ThreadPoolExecutor$Worker.run
  [23] Thread.run
  [24] [Thread-9 tid=125801]

--- 2661038963 ns (0.57%), 266 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-5 tid=125797]

--- 2620986451 ns (0.56%), 262 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-4 tid=125796]

--- 2601239473 ns (0.56%), 260 samples
  [ 0] LinkedTransferQueue.skipDeadNodesNearHead
  [ 1] LinkedTransferQueue.xfer
  [ 2] LinkedTransferQueue.take
  [ 3] BlockingTransfer.take
  [ 4] Channel.take
  [ 5] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 6] ReferencePipeline$3$1.accept
  [ 7] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 8] AbstractPipeline.copyInto
  [ 9] AbstractPipeline.wrapAndCopyInto
  [10] ReduceOps$ReduceOp.evaluateSequential
  [11] AbstractPipeline.evaluate
  [12] IntPipeline.reduce
  [13] IntPipeline.sum
  [14] Cell.calculateNextState
  [15] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [16] Iterable.forEach
  [17] CellsGroup.run
  [18] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [19] ThreadPoolExecutor.runWorker
  [20] ThreadPoolExecutor$Worker.run
  [21] Thread.run
  [22] [Thread-3 tid=125795]

--- 2520956478 ns (0.54%), 252 samples
  [ 0] LinkedTransferQueue.skipDeadNodesNearHead
  [ 1] LinkedTransferQueue.xfer
  [ 2] LinkedTransferQueue.take
  [ 3] BlockingTransfer.take
  [ 4] Channel.take
  [ 5] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 6] ReferencePipeline$3$1.accept
  [ 7] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 8] AbstractPipeline.copyInto
  [ 9] AbstractPipeline.wrapAndCopyInto
  [10] ReduceOps$ReduceOp.evaluateSequential
  [11] AbstractPipeline.evaluate
  [12] IntPipeline.reduce
  [13] IntPipeline.sum
  [14] Cell.calculateNextState
  [15] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [16] Iterable.forEach
  [17] CellsGroup.run
  [18] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [19] ThreadPoolExecutor.runWorker
  [20] ThreadPoolExecutor$Worker.run
  [21] Thread.run
  [22] [Thread-4 tid=125796]

--- 2501035614 ns (0.54%), 250 samples
  [ 0] LinkedTransferQueue.skipDeadNodesNearHead
  [ 1] LinkedTransferQueue.xfer
  [ 2] LinkedTransferQueue.take
  [ 3] BlockingTransfer.take
  [ 4] Channel.take
  [ 5] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 6] ReferencePipeline$3$1.accept
  [ 7] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 8] AbstractPipeline.copyInto
  [ 9] AbstractPipeline.wrapAndCopyInto
  [10] ReduceOps$ReduceOp.evaluateSequential
  [11] AbstractPipeline.evaluate
  [12] IntPipeline.reduce
  [13] IntPipeline.sum
  [14] Cell.calculateNextState
  [15] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [16] Iterable.forEach
  [17] CellsGroup.run
  [18] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [19] ThreadPoolExecutor.runWorker
  [20] ThreadPoolExecutor$Worker.run
  [21] Thread.run
  [22] [Thread-6 tid=125798]

--- 2440944132 ns (0.53%), 244 samples
  [ 0] LinkedTransferQueue.skipDeadNodesNearHead
  [ 1] LinkedTransferQueue.xfer
  [ 2] LinkedTransferQueue.take
  [ 3] BlockingTransfer.take
  [ 4] Channel.take
  [ 5] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 6] ReferencePipeline$3$1.accept
  [ 7] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 8] AbstractPipeline.copyInto
  [ 9] AbstractPipeline.wrapAndCopyInto
  [10] ReduceOps$ReduceOp.evaluateSequential
  [11] AbstractPipeline.evaluate
  [12] IntPipeline.reduce
  [13] IntPipeline.sum
  [14] Cell.calculateNextState
  [15] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [16] Iterable.forEach
  [17] CellsGroup.run
  [18] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [19] ThreadPoolExecutor.runWorker
  [20] ThreadPoolExecutor$Worker.run
  [21] Thread.run
  [22] [Thread-7 tid=125799]

--- 2431028102 ns (0.52%), 243 samples
  [ 0] LinkedTransferQueue.skipDeadNodesNearHead
  [ 1] LinkedTransferQueue.xfer
  [ 2] LinkedTransferQueue.take
  [ 3] BlockingTransfer.take
  [ 4] Channel.take
  [ 5] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 6] ReferencePipeline$3$1.accept
  [ 7] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 8] AbstractPipeline.copyInto
  [ 9] AbstractPipeline.wrapAndCopyInto
  [10] ReduceOps$ReduceOp.evaluateSequential
  [11] AbstractPipeline.evaluate
  [12] IntPipeline.reduce
  [13] IntPipeline.sum
  [14] Cell.calculateNextState
  [15] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [16] Iterable.forEach
  [17] CellsGroup.run
  [18] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [19] ThreadPoolExecutor.runWorker
  [20] ThreadPoolExecutor$Worker.run
  [21] Thread.run
  [22] [Thread-5 tid=125797]

--- 2400827780 ns (0.52%), 240 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue.casHead
  [ 3] LinkedTransferQueue.skipDeadNodesNearHead
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 9] ReferencePipeline$3$1.accept
  [10] ArrayList$ArrayListSpliterator.forEachRemaining
  [11] AbstractPipeline.copyInto
  [12] AbstractPipeline.wrapAndCopyInto
  [13] ReduceOps$ReduceOp.evaluateSequential
  [14] AbstractPipeline.evaluate
  [15] IntPipeline.reduce
  [16] IntPipeline.sum
  [17] Cell.calculateNextState
  [18] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [19] Iterable.forEach
  [20] CellsGroup.run
  [21] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [22] ThreadPoolExecutor.runWorker
  [23] ThreadPoolExecutor$Worker.run
  [24] Thread.run
  [25] [Thread-4 tid=125796]

--- 2361055364 ns (0.51%), 236 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue.casHead
  [ 3] LinkedTransferQueue.skipDeadNodesNearHead
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 9] ReferencePipeline$3$1.accept
  [10] ArrayList$ArrayListSpliterator.forEachRemaining
  [11] AbstractPipeline.copyInto
  [12] AbstractPipeline.wrapAndCopyInto
  [13] ReduceOps$ReduceOp.evaluateSequential
  [14] AbstractPipeline.evaluate
  [15] IntPipeline.reduce
  [16] IntPipeline.sum
  [17] Cell.calculateNextState
  [18] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [19] Iterable.forEach
  [20] CellsGroup.run
  [21] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [22] ThreadPoolExecutor.runWorker
  [23] ThreadPoolExecutor$Worker.run
  [24] Thread.run
  [25] [Thread-3 tid=125795]

--- 2350967243 ns (0.51%), 235 samples
  [ 0] LinkedTransferQueue.skipDeadNodesNearHead
  [ 1] LinkedTransferQueue.xfer
  [ 2] LinkedTransferQueue.take
  [ 3] BlockingTransfer.take
  [ 4] Channel.take
  [ 5] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 6] ReferencePipeline$3$1.accept
  [ 7] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 8] AbstractPipeline.copyInto
  [ 9] AbstractPipeline.wrapAndCopyInto
  [10] ReduceOps$ReduceOp.evaluateSequential
  [11] AbstractPipeline.evaluate
  [12] IntPipeline.reduce
  [13] IntPipeline.sum
  [14] Cell.calculateNextState
  [15] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [16] Iterable.forEach
  [17] CellsGroup.run
  [18] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [19] ThreadPoolExecutor.runWorker
  [20] ThreadPoolExecutor$Worker.run
  [21] Thread.run
  [22] [Thread-2 tid=125794]

--- 2344020099 ns (0.51%), 234 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue$Node.casNext
  [ 3] LinkedTransferQueue.xfer
  [ 4] LinkedTransferQueue.put
  [ 5] BlockingTransfer.put
  [ 6] Channel.put
  [ 7] TickPerCell.lambda$tick$0
  [ 8] TickPerCell$$Lambda$50.0x0000000801035ec0.accept
  [ 9] ChannelsGrid.lambda$forEachChannel$0
  [10] ChannelsGrid$$Lambda$51.0x00000008010360d8.accept
  [11] Dimensions.forEachRowCol
  [12] ChannelsGrid.forEachChannel
  [13] TickPerCell.tick
  [14] GameOfLife.calculateFrame
  [15] GameOfLife.lambda$calculateFrameBlocking$4
  [16] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [17] ThreadPoolExecutor.runWorker
  [18] ThreadPoolExecutor$Worker.run
  [19] Thread.run
  [20] [Thread-9 tid=125801]

--- 2320874282 ns (0.50%), 232 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-2 tid=125794]

--- 2290675361 ns (0.49%), 229 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue.casHead
  [ 3] LinkedTransferQueue.skipDeadNodesNearHead
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 9] ReferencePipeline$3$1.accept
  [10] ArrayList$ArrayListSpliterator.forEachRemaining
  [11] AbstractPipeline.copyInto
  [12] AbstractPipeline.wrapAndCopyInto
  [13] ReduceOps$ReduceOp.evaluateSequential
  [14] AbstractPipeline.evaluate
  [15] IntPipeline.reduce
  [16] IntPipeline.sum
  [17] Cell.calculateNextState
  [18] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [19] Iterable.forEach
  [20] CellsGroup.run
  [21] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [22] ThreadPoolExecutor.runWorker
  [23] ThreadPoolExecutor$Worker.run
  [24] Thread.run
  [25] [Thread-6 tid=125798]

--- 2200823816 ns (0.47%), 220 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue.casHead
  [ 3] LinkedTransferQueue.skipDeadNodesNearHead
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 9] ReferencePipeline$3$1.accept
  [10] ArrayList$ArrayListSpliterator.forEachRemaining
  [11] AbstractPipeline.copyInto
  [12] AbstractPipeline.wrapAndCopyInto
  [13] ReduceOps$ReduceOp.evaluateSequential
  [14] AbstractPipeline.evaluate
  [15] IntPipeline.reduce
  [16] IntPipeline.sum
  [17] Cell.calculateNextState
  [18] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [19] Iterable.forEach
  [20] CellsGroup.run
  [21] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [22] ThreadPoolExecutor.runWorker
  [23] ThreadPoolExecutor$Worker.run
  [24] Thread.run
  [25] [Thread-8 tid=125800]

--- 2180914260 ns (0.47%), 218 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-3 tid=125795]

--- 2160904071 ns (0.47%), 216 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-6 tid=125798]

--- 2150812471 ns (0.46%), 215 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue.casHead
  [ 3] LinkedTransferQueue.skipDeadNodesNearHead
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 9] ReferencePipeline$3$1.accept
  [10] ArrayList$ArrayListSpliterator.forEachRemaining
  [11] AbstractPipeline.copyInto
  [12] AbstractPipeline.wrapAndCopyInto
  [13] ReduceOps$ReduceOp.evaluateSequential
  [14] AbstractPipeline.evaluate
  [15] IntPipeline.reduce
  [16] IntPipeline.sum
  [17] Cell.calculateNextState
  [18] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [19] Iterable.forEach
  [20] CellsGroup.run
  [21] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [22] ThreadPoolExecutor.runWorker
  [23] ThreadPoolExecutor$Worker.run
  [24] Thread.run
  [25] [Thread-5 tid=125797]

--- 2120990031 ns (0.46%), 212 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-7 tid=125799]

--- 2023127923 ns (0.44%), 202 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue.casHead
  [ 3] LinkedTransferQueue.skipDeadNodesNearHead
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] GameOfLife$$Lambda$53.0x0000000801036518.test
  [ 9] ChannelsGrid.lambda$forEachChannel$1
  [10] ChannelsGrid$$Lambda$54.0x0000000801036750.accept
  [11] Dimensions.forEachRowCol
  [12] ChannelsGrid.forEachChannel
  [13] GameOfLife.calculateFrame
  [14] GameOfLife.lambda$calculateFrameBlocking$4
  [15] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [16] ThreadPoolExecutor.runWorker
  [17] ThreadPoolExecutor$Worker.run
  [18] Thread.run
  [19] [Thread-9 tid=125801]

--- 2010507931 ns (0.43%), 201 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue.casHead
  [ 3] LinkedTransferQueue.skipDeadNodesNearHead
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 9] ReferencePipeline$3$1.accept
  [10] ArrayList$ArrayListSpliterator.forEachRemaining
  [11] AbstractPipeline.copyInto
  [12] AbstractPipeline.wrapAndCopyInto
  [13] ReduceOps$ReduceOp.evaluateSequential
  [14] AbstractPipeline.evaluate
  [15] IntPipeline.reduce
  [16] IntPipeline.sum
  [17] Cell.calculateNextState
  [18] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [19] Iterable.forEach
  [20] CellsGroup.run
  [21] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [22] ThreadPoolExecutor.runWorker
  [23] ThreadPoolExecutor$Worker.run
  [24] Thread.run
  [25] [Thread-2 tid=125794]

--- 1950773015 ns (0.42%), 195 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue.casHead
  [ 3] LinkedTransferQueue.skipDeadNodesNearHead
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 9] ReferencePipeline$3$1.accept
  [10] ArrayList$ArrayListSpliterator.forEachRemaining
  [11] AbstractPipeline.copyInto
  [12] AbstractPipeline.wrapAndCopyInto
  [13] ReduceOps$ReduceOp.evaluateSequential
  [14] AbstractPipeline.evaluate
  [15] IntPipeline.reduce
  [16] IntPipeline.sum
  [17] Cell.calculateNextState
  [18] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [19] Iterable.forEach
  [20] CellsGroup.run
  [21] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [22] ThreadPoolExecutor.runWorker
  [23] ThreadPoolExecutor$Worker.run
  [24] Thread.run
  [25] [Thread-7 tid=125799]

--- 1910790782 ns (0.41%), 191 samples
  [ 0] LinkedTransferQueue.skipDeadNodesNearHead
  [ 1] LinkedTransferQueue.xfer
  [ 2] LinkedTransferQueue.take
  [ 3] BlockingTransfer.take
  [ 4] Channel.take
  [ 5] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 6] ReferencePipeline$3$1.accept
  [ 7] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 8] AbstractPipeline.copyInto
  [ 9] AbstractPipeline.wrapAndCopyInto
  [10] ReduceOps$ReduceOp.evaluateSequential
  [11] AbstractPipeline.evaluate
  [12] IntPipeline.reduce
  [13] IntPipeline.sum
  [14] Cell.calculateNextState
  [15] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [16] Iterable.forEach
  [17] CellsGroup.run
  [18] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [19] ThreadPoolExecutor.runWorker
  [20] ThreadPoolExecutor$Worker.run
  [21] Thread.run
  [22] [Thread-8 tid=125800]

--- 1660928318 ns (0.36%), 166 samples
  [ 0] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 1] Iterable.forEach
  [ 2] CellsGroup.run
  [ 3] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 4] ThreadPoolExecutor.runWorker
  [ 5] ThreadPoolExecutor$Worker.run
  [ 6] Thread.run
  [ 7] [Thread-5 tid=125797]

--- 1530933396 ns (0.33%), 153 samples
  [ 0] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 1] Iterable.forEach
  [ 2] CellsGroup.run
  [ 3] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 4] ThreadPoolExecutor.runWorker
  [ 5] ThreadPoolExecutor$Worker.run
  [ 6] Thread.run
  [ 7] [Thread-3 tid=125795]

--- 1450701476 ns (0.31%), 145 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-8 tid=125800]

--- 1270667553 ns (0.27%), 127 samples
  [ 0] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 1] Iterable.forEach
  [ 2] CellsGroup.run
  [ 3] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 4] ThreadPoolExecutor.runWorker
  [ 5] ThreadPoolExecutor$Worker.run
  [ 6] Thread.run
  [ 7] [Thread-2 tid=125794]

--- 1230852464 ns (0.27%), 123 samples
  [ 0] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 1] Iterable.forEach
  [ 2] CellsGroup.run
  [ 3] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 4] ThreadPoolExecutor.runWorker
  [ 5] ThreadPoolExecutor$Worker.run
  [ 6] Thread.run
  [ 7] [Thread-4 tid=125796]

--- 1120816250 ns (0.24%), 112 samples
  [ 0] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 1] Iterable.forEach
  [ 2] CellsGroup.run
  [ 3] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 4] ThreadPoolExecutor.runWorker
  [ 5] ThreadPoolExecutor$Worker.run
  [ 6] Thread.run
  [ 7] [Thread-8 tid=125800]

--- 1110459562 ns (0.24%), 111 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-3 tid=125795]

--- 1050441364 ns (0.23%), 105 samples
  [ 0] Channel.take
  [ 1] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 2] ReferencePipeline$3$1.accept
  [ 3] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 4] AbstractPipeline.copyInto
  [ 5] AbstractPipeline.wrapAndCopyInto
  [ 6] ReduceOps$ReduceOp.evaluateSequential
  [ 7] AbstractPipeline.evaluate
  [ 8] IntPipeline.reduce
  [ 9] IntPipeline.sum
  [10] Cell.calculateNextState
  [11] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-4 tid=125796]

--- 1050371576 ns (0.23%), 105 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-4 tid=125796]

--- 1040501173 ns (0.22%), 104 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-6 tid=125798]

--- 1031672845 ns (0.22%), 103 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.put
  [ 2] BlockingTransfer.put
  [ 3] Channel.put
  [ 4] TickPerCell.lambda$tick$0
  [ 5] TickPerCell$$Lambda$50.0x0000000801035ec0.accept
  [ 6] ChannelsGrid.lambda$forEachChannel$0
  [ 7] ChannelsGrid$$Lambda$51.0x00000008010360d8.accept
  [ 8] Dimensions.forEachRowCol
  [ 9] ChannelsGrid.forEachChannel
  [10] TickPerCell.tick
  [11] GameOfLife.calculateFrame
  [12] GameOfLife.lambda$calculateFrameBlocking$4
  [13] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-9 tid=125801]

--- 1010527716 ns (0.22%), 101 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-5 tid=125797]

--- 980660104 ns (0.21%), 98 samples
  [ 0] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 1] Iterable.forEach
  [ 2] CellsGroup.run
  [ 3] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 4] ThreadPoolExecutor.runWorker
  [ 5] ThreadPoolExecutor$Worker.run
  [ 6] Thread.run
  [ 7] [Thread-6 tid=125798]

--- 970458556 ns (0.21%), 97 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-6 tid=125798]

--- 950394168 ns (0.20%), 95 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-3 tid=125795]

--- 950293285 ns (0.20%), 95 samples
  [ 0] Channel.take
  [ 1] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 2] ReferencePipeline$3$1.accept
  [ 3] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 4] AbstractPipeline.copyInto
  [ 5] AbstractPipeline.wrapAndCopyInto
  [ 6] ReduceOps$ReduceOp.evaluateSequential
  [ 7] AbstractPipeline.evaluate
  [ 8] IntPipeline.reduce
  [ 9] IntPipeline.sum
  [10] Cell.calculateNextState
  [11] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-6 tid=125798]

--- 940365958 ns (0.20%), 94 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-8 tid=125800]

--- 930297316 ns (0.20%), 93 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-2 tid=125794]

--- 930277730 ns (0.20%), 93 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-7 tid=125799]

--- 923188214 ns (0.20%), 92 samples
  [ 0] syscall_enter_from_user_mode_[k]
  [ 1] do_syscall_64_[k]
  [ 2] entry_SYSCALL_64_after_hwframe_[k]
  [ 3] sched_yield
  [ 4] Thread.yield0
  [ 5] Thread.yield
  [ 6] LinkedTransferQueue.awaitMatch
  [ 7] LinkedTransferQueue.xfer
  [ 8] LinkedTransferQueue.take
  [ 9] BlockingTransfer.take
  [10] Channel.take
  [11] GameOfLife$$Lambda$53.0x0000000801036518.test
  [12] ChannelsGrid.lambda$forEachChannel$1
  [13] ChannelsGrid$$Lambda$54.0x0000000801036750.accept
  [14] Dimensions.forEachRowCol
  [15] ChannelsGrid.forEachChannel
  [16] GameOfLife.calculateFrame
  [17] GameOfLife.lambda$calculateFrameBlocking$4
  [18] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [19] ThreadPoolExecutor.runWorker
  [20] ThreadPoolExecutor$Worker.run
  [21] Thread.run
  [22] [Thread-9 tid=125801]

--- 920557190 ns (0.20%), 92 samples
  [ 0] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 1] Iterable.forEach
  [ 2] CellsGroup.run
  [ 3] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 4] ThreadPoolExecutor.runWorker
  [ 5] ThreadPoolExecutor$Worker.run
  [ 6] Thread.run
  [ 7] [Thread-7 tid=125799]

--- 910399021 ns (0.20%), 91 samples
  [ 0] LinkedTransferQueue.skipDeadNodesNearHead
  [ 1] LinkedTransferQueue.xfer
  [ 2] LinkedTransferQueue.put
  [ 3] BlockingTransfer.put
  [ 4] Channel.put
  [ 5] Cell.calculateNextState
  [ 6] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-7 tid=125799]

--- 900390775 ns (0.19%), 90 samples
  [ 0] LinkedTransferQueue.skipDeadNodesNearHead
  [ 1] LinkedTransferQueue.xfer
  [ 2] LinkedTransferQueue.put
  [ 3] BlockingTransfer.put
  [ 4] Channel.put
  [ 5] Cell.calculateNextState
  [ 6] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-5 tid=125797]

--- 870402408 ns (0.19%), 87 samples
  [ 0] Channel.take
  [ 1] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 2] ReferencePipeline$3$1.accept
  [ 3] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 4] AbstractPipeline.copyInto
  [ 5] AbstractPipeline.wrapAndCopyInto
  [ 6] ReduceOps$ReduceOp.evaluateSequential
  [ 7] AbstractPipeline.evaluate
  [ 8] IntPipeline.reduce
  [ 9] IntPipeline.sum
  [10] Cell.calculateNextState
  [11] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-5 tid=125797]

--- 862410074 ns (0.19%), 86 samples
  [ 0] _raw_spin_unlock_irqrestore_[k]
  [ 1] try_to_wake_up_[k]
  [ 2] wake_up_q_[k]
  [ 3] futex_wake_[k]
  [ 4] do_futex_[k]
  [ 5] __x64_sys_futex_[k]
  [ 6] do_syscall_64_[k]
  [ 7] entry_SYSCALL_64_after_hwframe_[k]
  [ 8] ___pthread_cond_signal
  [ 9] Unsafe.unpark
  [10] LockSupport.unpark
  [11] LinkedTransferQueue$Node.tryMatch
  [12] LinkedTransferQueue.xfer
  [13] LinkedTransferQueue.put
  [14] BlockingTransfer.put
  [15] Channel.put
  [16] TickPerCell.lambda$tick$0
  [17] TickPerCell$$Lambda$50.0x0000000801035ec0.accept
  [18] ChannelsGrid.lambda$forEachChannel$0
  [19] ChannelsGrid$$Lambda$51.0x00000008010360d8.accept
  [20] Dimensions.forEachRowCol
  [21] ChannelsGrid.forEachChannel
  [22] TickPerCell.tick
  [23] GameOfLife.calculateFrame
  [24] GameOfLife.lambda$calculateFrameBlocking$4
  [25] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [26] ThreadPoolExecutor.runWorker
  [27] ThreadPoolExecutor$Worker.run
  [28] Thread.run
  [29] [Thread-9 tid=125801]

--- 860372104 ns (0.19%), 86 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-4 tid=125796]

--- 860220451 ns (0.19%), 86 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-5 tid=125797]

--- 840391393 ns (0.18%), 84 samples
  [ 0] LinkedTransferQueue.skipDeadNodesNearHead
  [ 1] LinkedTransferQueue.xfer
  [ 2] LinkedTransferQueue.put
  [ 3] BlockingTransfer.put
  [ 4] Channel.put
  [ 5] Cell.calculateNextState
  [ 6] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-3 tid=125795]

--- 840375250 ns (0.18%), 84 samples
  [ 0] Channel.take
  [ 1] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 2] ReferencePipeline$3$1.accept
  [ 3] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 4] AbstractPipeline.copyInto
  [ 5] AbstractPipeline.wrapAndCopyInto
  [ 6] ReduceOps$ReduceOp.evaluateSequential
  [ 7] AbstractPipeline.evaluate
  [ 8] IntPipeline.reduce
  [ 9] IntPipeline.sum
  [10] Cell.calculateNextState
  [11] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-3 tid=125795]

--- 840239764 ns (0.18%), 84 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-2 tid=125794]

--- 830403319 ns (0.18%), 83 samples
  [ 0] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 1] Iterable.forEach
  [ 2] CellsGroup.run
  [ 3] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 4] ThreadPoolExecutor.runWorker
  [ 5] ThreadPoolExecutor$Worker.run
  [ 6] Thread.run
  [ 7] [Thread-6 tid=125798]

--- 810334087 ns (0.17%), 81 samples
  [ 0] LinkedTransferQueue.skipDeadNodesNearHead
  [ 1] LinkedTransferQueue.xfer
  [ 2] LinkedTransferQueue.put
  [ 3] BlockingTransfer.put
  [ 4] Channel.put
  [ 5] Cell.calculateNextState
  [ 6] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-4 tid=125796]

--- 810312242 ns (0.17%), 81 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-7 tid=125799]

--- 771287303 ns (0.17%), 77 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue.casTail
  [ 3] LinkedTransferQueue.xfer
  [ 4] LinkedTransferQueue.put
  [ 5] BlockingTransfer.put
  [ 6] Channel.put
  [ 7] TickPerCell.lambda$tick$0
  [ 8] TickPerCell$$Lambda$50.0x0000000801035ec0.accept
  [ 9] ChannelsGrid.lambda$forEachChannel$0
  [10] ChannelsGrid$$Lambda$51.0x00000008010360d8.accept
  [11] Dimensions.forEachRowCol
  [12] ChannelsGrid.forEachChannel
  [13] TickPerCell.tick
  [14] GameOfLife.calculateFrame
  [15] GameOfLife.lambda$calculateFrameBlocking$4
  [16] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [17] ThreadPoolExecutor.runWorker
  [18] ThreadPoolExecutor$Worker.run
  [19] Thread.run
  [20] [Thread-9 tid=125801]

--- 770281320 ns (0.17%), 77 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-8 tid=125800]

--- 770254237 ns (0.17%), 77 samples
  [ 0] LinkedTransferQueue.skipDeadNodesNearHead
  [ 1] LinkedTransferQueue.xfer
  [ 2] LinkedTransferQueue.put
  [ 3] BlockingTransfer.put
  [ 4] Channel.put
  [ 5] Cell.calculateNextState
  [ 6] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-6 tid=125798]

--- 760137103 ns (0.16%), 76 samples
  [ 0] Channel.take
  [ 1] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 2] ReferencePipeline$3$1.accept
  [ 3] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 4] AbstractPipeline.copyInto
  [ 5] AbstractPipeline.wrapAndCopyInto
  [ 6] ReduceOps$ReduceOp.evaluateSequential
  [ 7] AbstractPipeline.evaluate
  [ 8] IntPipeline.reduce
  [ 9] IntPipeline.sum
  [10] Cell.calculateNextState
  [11] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-2 tid=125794]

--- 740286348 ns (0.16%), 74 samples
  [ 0] Channel.take
  [ 1] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 2] ReferencePipeline$3$1.accept
  [ 3] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 4] AbstractPipeline.copyInto
  [ 5] AbstractPipeline.wrapAndCopyInto
  [ 6] ReduceOps$ReduceOp.evaluateSequential
  [ 7] AbstractPipeline.evaluate
  [ 8] IntPipeline.reduce
  [ 9] IntPipeline.sum
  [10] Cell.calculateNextState
  [11] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-8 tid=125800]

--- 740241417 ns (0.16%), 74 samples
  [ 0] Channel.take
  [ 1] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 2] ReferencePipeline$3$1.accept
  [ 3] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 4] AbstractPipeline.copyInto
  [ 5] AbstractPipeline.wrapAndCopyInto
  [ 6] ReduceOps$ReduceOp.evaluateSequential
  [ 7] AbstractPipeline.evaluate
  [ 8] IntPipeline.reduce
  [ 9] IntPipeline.sum
  [10] Cell.calculateNextState
  [11] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-7 tid=125799]

--- 730497970 ns (0.16%), 73 samples
  [ 0] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 1] Iterable.forEach
  [ 2] CellsGroup.run
  [ 3] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 4] ThreadPoolExecutor.runWorker
  [ 5] ThreadPoolExecutor$Worker.run
  [ 6] Thread.run
  [ 7] [Thread-7 tid=125799]

--- 700355573 ns (0.15%), 70 samples
  [ 0] LinkedTransferQueue.skipDeadNodesNearHead
  [ 1] LinkedTransferQueue.xfer
  [ 2] LinkedTransferQueue.put
  [ 3] BlockingTransfer.put
  [ 4] Channel.put
  [ 5] Cell.calculateNextState
  [ 6] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-8 tid=125800]

--- 670311515 ns (0.14%), 67 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.put
  [ 2] BlockingTransfer.put
  [ 3] Channel.put
  [ 4] Cell.lambda$notifyLiveness$0
  [ 5] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 6] ArrayList.forEach
  [ 7] Cell.notifyLiveness
  [ 8] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-6 tid=125798]

--- 660321875 ns (0.14%), 66 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.put
  [ 2] BlockingTransfer.put
  [ 3] Channel.put
  [ 4] Cell.lambda$notifyLiveness$0
  [ 5] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 6] ArrayList.forEach
  [ 7] Cell.notifyLiveness
  [ 8] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-4 tid=125796]

--- 660210031 ns (0.14%), 66 samples
  [ 0] LinkedTransferQueue.skipDeadNodesNearHead
  [ 1] LinkedTransferQueue.xfer
  [ 2] LinkedTransferQueue.put
  [ 3] BlockingTransfer.put
  [ 4] Channel.put
  [ 5] Cell.calculateNextState
  [ 6] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-2 tid=125794]

--- 650361340 ns (0.14%), 65 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.put
  [ 2] BlockingTransfer.put
  [ 3] Channel.put
  [ 4] Cell.lambda$notifyLiveness$0
  [ 5] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 6] ArrayList.forEach
  [ 7] Cell.notifyLiveness
  [ 8] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-3 tid=125795]

--- 620297936 ns (0.13%), 62 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue$Node.casItem
  [ 3] LinkedTransferQueue$Node.tryMatch
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] TickPerCell.waitTick
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-3 tid=125795]

--- 590373013 ns (0.13%), 59 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.put
  [ 2] BlockingTransfer.put
  [ 3] Channel.put
  [ 4] Cell.lambda$notifyLiveness$0
  [ 5] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 6] ArrayList.forEach
  [ 7] Cell.notifyLiveness
  [ 8] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-5 tid=125797]

--- 590355399 ns (0.13%), 59 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue$Node.casItem
  [ 3] LinkedTransferQueue$Node.tryMatch
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] TickPerCell.waitTick
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-7 tid=125799]

--- 590293890 ns (0.13%), 59 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue$Node.casItem
  [ 3] LinkedTransferQueue$Node.tryMatch
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] TickPerCell.waitTick
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-6 tid=125798]

--- 560939597 ns (0.12%), 56 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] GameOfLife$$Lambda$53.0x0000000801036518.test
  [ 5] ChannelsGrid.lambda$forEachChannel$1
  [ 6] ChannelsGrid$$Lambda$54.0x0000000801036750.accept
  [ 7] Dimensions.forEachRowCol
  [ 8] ChannelsGrid.forEachChannel
  [ 9] GameOfLife.calculateFrame
  [10] GameOfLife.lambda$calculateFrameBlocking$4
  [11] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-9 tid=125801]

--- 551953006 ns (0.12%), 55 samples
  [ 0] __futex_abstimed_wait_common
  [ 1] Unsafe.park
  [ 2] LockSupport.park
  [ 3] LinkedTransferQueue$Node.block
  [ 4] ForkJoinPool.unmanagedBlock
  [ 5] ForkJoinPool.managedBlock
  [ 6] LinkedTransferQueue.awaitMatch
  [ 7] LinkedTransferQueue.xfer
  [ 8] LinkedTransferQueue.take
  [ 9] BlockingTransfer.take
  [10] Channel.take
  [11] GameOfLife$$Lambda$53.0x0000000801036518.test
  [12] ChannelsGrid.lambda$forEachChannel$1
  [13] ChannelsGrid$$Lambda$54.0x0000000801036750.accept
  [14] Dimensions.forEachRowCol
  [15] ChannelsGrid.forEachChannel
  [16] GameOfLife.calculateFrame
  [17] GameOfLife.lambda$calculateFrameBlocking$4
  [18] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [19] ThreadPoolExecutor.runWorker
  [20] ThreadPoolExecutor$Worker.run
  [21] Thread.run
  [22] [Thread-9 tid=125801]

--- 550152585 ns (0.12%), 55 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue$Node.casItem
  [ 3] LinkedTransferQueue$Node.tryMatch
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] TickPerCell.waitTick
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-2 tid=125794]

--- 550135720 ns (0.12%), 55 samples
  [ 0] ReferencePipeline$3$1.accept
  [ 1] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 2] AbstractPipeline.copyInto
  [ 3] AbstractPipeline.wrapAndCopyInto
  [ 4] ReduceOps$ReduceOp.evaluateSequential
  [ 5] AbstractPipeline.evaluate
  [ 6] IntPipeline.reduce
  [ 7] IntPipeline.sum
  [ 8] Cell.calculateNextState
  [ 9] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-2 tid=125794]

--- 540279481 ns (0.12%), 54 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.put
  [ 2] BlockingTransfer.put
  [ 3] Channel.put
  [ 4] Cell.lambda$notifyLiveness$0
  [ 5] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 6] ArrayList.forEach
  [ 7] Cell.notifyLiveness
  [ 8] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-7 tid=125799]

--- 520338923 ns (0.11%), 52 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.put
  [ 2] BlockingTransfer.put
  [ 3] Channel.put
  [ 4] Cell.lambda$notifyLiveness$0
  [ 5] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 6] ArrayList.forEach
  [ 7] Cell.notifyLiveness
  [ 8] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-8 tid=125800]

--- 500258674 ns (0.11%), 50 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue$Node.casItem
  [ 3] LinkedTransferQueue$Node.tryMatch
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] TickPerCell.waitTick
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-8 tid=125800]

--- 500172180 ns (0.11%), 50 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.put
  [ 2] BlockingTransfer.put
  [ 3] Channel.put
  [ 4] Cell.lambda$notifyLiveness$0
  [ 5] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 6] ArrayList.forEach
  [ 7] Cell.notifyLiveness
  [ 8] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-2 tid=125794]

--- 480320928 ns (0.10%), 48 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue$Node.casItem
  [ 3] LinkedTransferQueue$Node.tryMatch
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] TickPerCell.waitTick
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-5 tid=125797]

--- 470242386 ns (0.10%), 47 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue$Node.casItem
  [ 3] LinkedTransferQueue$Node.tryMatch
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] TickPerCell.waitTick
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-4 tid=125796]

--- 470213147 ns (0.10%), 47 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue$Node.casNext
  [ 3] LinkedTransferQueue.xfer
  [ 4] LinkedTransferQueue.put
  [ 5] BlockingTransfer.put
  [ 6] Channel.put
  [ 7] Cell.calculateNextState
  [ 8] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-7 tid=125799]

--- 450203120 ns (0.10%), 45 samples
  [ 0] Channel.take
  [ 1] TickPerCell.waitTick
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-5 tid=125797]

--- 440203080 ns (0.09%), 44 samples
  [ 0] LockSupport.unpark
  [ 1] LinkedTransferQueue$Node.tryMatch
  [ 2] LinkedTransferQueue.xfer
  [ 3] LinkedTransferQueue.take
  [ 4] BlockingTransfer.take
  [ 5] Channel.take
  [ 6] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 7] ReferencePipeline$3$1.accept
  [ 8] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 9] AbstractPipeline.copyInto
  [10] AbstractPipeline.wrapAndCopyInto
  [11] ReduceOps$ReduceOp.evaluateSequential
  [12] AbstractPipeline.evaluate
  [13] IntPipeline.reduce
  [14] IntPipeline.sum
  [15] Cell.calculateNextState
  [16] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [17] Iterable.forEach
  [18] CellsGroup.run
  [19] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-4 tid=125796]

--- 431643894 ns (0.09%), 43 samples
  [ 0] do_sched_yield_[k]
  [ 1] __x64_sys_sched_yield_[k]
  [ 2] do_syscall_64_[k]
  [ 3] entry_SYSCALL_64_after_hwframe_[k]
  [ 4] sched_yield
  [ 5] Thread.yield0
  [ 6] Thread.yield
  [ 7] LinkedTransferQueue.awaitMatch
  [ 8] LinkedTransferQueue.xfer
  [ 9] LinkedTransferQueue.take
  [10] BlockingTransfer.take
  [11] Channel.take
  [12] GameOfLife$$Lambda$53.0x0000000801036518.test
  [13] ChannelsGrid.lambda$forEachChannel$1
  [14] ChannelsGrid$$Lambda$54.0x0000000801036750.accept
  [15] Dimensions.forEachRowCol
  [16] ChannelsGrid.forEachChannel
  [17] GameOfLife.calculateFrame
  [18] GameOfLife.lambda$calculateFrameBlocking$4
  [19] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-9 tid=125801]

--- 430155264 ns (0.09%), 43 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue$Node.casNext
  [ 3] LinkedTransferQueue.xfer
  [ 4] LinkedTransferQueue.put
  [ 5] BlockingTransfer.put
  [ 6] Channel.put
  [ 7] Cell.calculateNextState
  [ 8] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-5 tid=125797]

--- 420266556 ns (0.09%), 42 samples
  [ 0] Channel.take
  [ 1] TickPerCell.waitTick
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-4 tid=125796]

--- 420203493 ns (0.09%), 42 samples
  [ 0] ReferencePipeline$3$1.accept
  [ 1] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 2] AbstractPipeline.copyInto
  [ 3] AbstractPipeline.wrapAndCopyInto
  [ 4] ReduceOps$ReduceOp.evaluateSequential
  [ 5] AbstractPipeline.evaluate
  [ 6] IntPipeline.reduce
  [ 7] IntPipeline.sum
  [ 8] Cell.calculateNextState
  [ 9] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-3 tid=125795]

--- 410314092 ns (0.09%), 41 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue.casHead
  [ 3] LinkedTransferQueue.skipDeadNodesNearHead
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] TickPerCell.waitTick
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-7 tid=125799]

--- 410140107 ns (0.09%), 41 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue$Node.casNext
  [ 3] LinkedTransferQueue.xfer
  [ 4] LinkedTransferQueue.put
  [ 5] BlockingTransfer.put
  [ 6] Channel.put
  [ 7] Cell.calculateNextState
  [ 8] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-4 tid=125796]

--- 400164506 ns (0.09%), 40 samples
  [ 0] LockSupport.unpark
  [ 1] LinkedTransferQueue$Node.tryMatch
  [ 2] LinkedTransferQueue.xfer
  [ 3] LinkedTransferQueue.take
  [ 4] BlockingTransfer.take
  [ 5] Channel.take
  [ 6] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 7] ReferencePipeline$3$1.accept
  [ 8] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 9] AbstractPipeline.copyInto
  [10] AbstractPipeline.wrapAndCopyInto
  [11] ReduceOps$ReduceOp.evaluateSequential
  [12] AbstractPipeline.evaluate
  [13] IntPipeline.reduce
  [14] IntPipeline.sum
  [15] Cell.calculateNextState
  [16] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [17] Iterable.forEach
  [18] CellsGroup.run
  [19] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-3 tid=125795]

--- 400162420 ns (0.09%), 40 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue$Node.casNext
  [ 3] LinkedTransferQueue.xfer
  [ 4] LinkedTransferQueue.put
  [ 5] BlockingTransfer.put
  [ 6] Channel.put
  [ 7] Cell.calculateNextState
  [ 8] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-3 tid=125795]

--- 400050051 ns (0.09%), 40 samples
  [ 0] ReferencePipeline$3$1.accept
  [ 1] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 2] AbstractPipeline.copyInto
  [ 3] AbstractPipeline.wrapAndCopyInto
  [ 4] ReduceOps$ReduceOp.evaluateSequential
  [ 5] AbstractPipeline.evaluate
  [ 6] IntPipeline.reduce
  [ 7] IntPipeline.sum
  [ 8] Cell.calculateNextState
  [ 9] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-6 tid=125798]

--- 390635467 ns (0.08%), 39 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.put
  [ 2] BlockingTransfer.put
  [ 3] Channel.put
  [ 4] TickPerCell.lambda$tick$0
  [ 5] TickPerCell$$Lambda$50.0x0000000801035ec0.accept
  [ 6] ChannelsGrid.lambda$forEachChannel$0
  [ 7] ChannelsGrid$$Lambda$51.0x00000008010360d8.accept
  [ 8] Dimensions.forEachRowCol
  [ 9] ChannelsGrid.forEachChannel
  [10] TickPerCell.tick
  [11] GameOfLife.calculateFrame
  [12] GameOfLife.lambda$calculateFrameBlocking$4
  [13] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-9 tid=125801]

--- 390098500 ns (0.08%), 39 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue$Node.casNext
  [ 3] LinkedTransferQueue.xfer
  [ 4] LinkedTransferQueue.put
  [ 5] BlockingTransfer.put
  [ 6] Channel.put
  [ 7] Cell.calculateNextState
  [ 8] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-6 tid=125798]

--- 380238303 ns (0.08%), 38 samples
  [ 0] ReferencePipeline$3$1.accept
  [ 1] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 2] AbstractPipeline.copyInto
  [ 3] AbstractPipeline.wrapAndCopyInto
  [ 4] ReduceOps$ReduceOp.evaluateSequential
  [ 5] AbstractPipeline.evaluate
  [ 6] IntPipeline.reduce
  [ 7] IntPipeline.sum
  [ 8] Cell.calculateNextState
  [ 9] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-7 tid=125799]

--- 380123487 ns (0.08%), 38 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue$Node.casNext
  [ 3] LinkedTransferQueue.xfer
  [ 4] LinkedTransferQueue.put
  [ 5] BlockingTransfer.put
  [ 6] Channel.put
  [ 7] Cell.calculateNextState
  [ 8] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-2 tid=125794]

--- 370210700 ns (0.08%), 37 samples
  [ 0] Cell.notifyLiveness
  [ 1] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 2] Iterable.forEach
  [ 3] CellsGroup.run
  [ 4] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 5] ThreadPoolExecutor.runWorker
  [ 6] ThreadPoolExecutor$Worker.run
  [ 7] Thread.run
  [ 8] [Thread-7 tid=125799]

--- 370108428 ns (0.08%), 37 samples
  [ 0] ReferencePipeline$3.opWrapSink
  [ 1] AbstractPipeline.wrapSink
  [ 2] AbstractPipeline.wrapAndCopyInto
  [ 3] ReduceOps$ReduceOp.evaluateSequential
  [ 4] AbstractPipeline.evaluate
  [ 5] IntPipeline.reduce
  [ 6] IntPipeline.sum
  [ 7] Cell.calculateNextState
  [ 8] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-4 tid=125796]

--- 360186640 ns (0.08%), 36 samples
  [ 0] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 1] AbstractPipeline.copyInto
  [ 2] AbstractPipeline.wrapAndCopyInto
  [ 3] ReduceOps$ReduceOp.evaluateSequential
  [ 4] AbstractPipeline.evaluate
  [ 5] IntPipeline.reduce
  [ 6] IntPipeline.sum
  [ 7] Cell.calculateNextState
  [ 8] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-2 tid=125794]

--- 360148726 ns (0.08%), 36 samples
  [ 0] ReferencePipeline$3$1.accept
  [ 1] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 2] AbstractPipeline.copyInto
  [ 3] AbstractPipeline.wrapAndCopyInto
  [ 4] ReduceOps$ReduceOp.evaluateSequential
  [ 5] AbstractPipeline.evaluate
  [ 6] IntPipeline.reduce
  [ 7] IntPipeline.sum
  [ 8] Cell.calculateNextState
  [ 9] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-4 tid=125796]

--- 360066457 ns (0.08%), 36 samples
  [ 0] ReferencePipeline$3$1.accept
  [ 1] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 2] AbstractPipeline.copyInto
  [ 3] AbstractPipeline.wrapAndCopyInto
  [ 4] ReduceOps$ReduceOp.evaluateSequential
  [ 5] AbstractPipeline.evaluate
  [ 6] IntPipeline.reduce
  [ 7] IntPipeline.sum
  [ 8] Cell.calculateNextState
  [ 9] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-5 tid=125797]

--- 350614028 ns (0.08%), 35 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.put
  [ 2] BlockingTransfer.put
  [ 3] Channel.put
  [ 4] TickPerCell.lambda$tick$0
  [ 5] TickPerCell$$Lambda$50.0x0000000801035ec0.accept
  [ 6] ChannelsGrid.lambda$forEachChannel$0
  [ 7] ChannelsGrid$$Lambda$51.0x00000008010360d8.accept
  [ 8] Dimensions.forEachRowCol
  [ 9] ChannelsGrid.forEachChannel
  [10] TickPerCell.tick
  [11] GameOfLife.calculateFrame
  [12] GameOfLife.lambda$calculateFrameBlocking$4
  [13] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-9 tid=125801]

--- 350207744 ns (0.08%), 35 samples
  [ 0] ArrayList.elementAt
  [ 1] ArrayList.forEach
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-4 tid=125796]

--- 350172774 ns (0.08%), 35 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue.casHead
  [ 3] LinkedTransferQueue.skipDeadNodesNearHead
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] TickPerCell.waitTick
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-5 tid=125797]

--- 341307535 ns (0.07%), 34 samples
  [ 0] __lll_lock_wake
  [ 1] Unsafe_Park
  [ 2] Unsafe.park
  [ 3] LockSupport.park
  [ 4] LinkedTransferQueue$Node.block
  [ 5] ForkJoinPool.unmanagedBlock
  [ 6] ForkJoinPool.managedBlock
  [ 7] LinkedTransferQueue.awaitMatch
  [ 8] LinkedTransferQueue.xfer
  [ 9] LinkedTransferQueue.take
  [10] BlockingTransfer.take
  [11] Channel.take
  [12] GameOfLife$$Lambda$53.0x0000000801036518.test
  [13] ChannelsGrid.lambda$forEachChannel$1
  [14] ChannelsGrid$$Lambda$54.0x0000000801036750.accept
  [15] Dimensions.forEachRowCol
  [16] ChannelsGrid.forEachChannel
  [17] GameOfLife.calculateFrame
  [18] GameOfLife.lambda$calculateFrameBlocking$4
  [19] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-9 tid=125801]

--- 340196211 ns (0.07%), 34 samples
  [ 0] LockSupport.unpark
  [ 1] LinkedTransferQueue$Node.tryMatch
  [ 2] LinkedTransferQueue.xfer
  [ 3] LinkedTransferQueue.take
  [ 4] BlockingTransfer.take
  [ 5] Channel.take
  [ 6] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 7] ReferencePipeline$3$1.accept
  [ 8] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 9] AbstractPipeline.copyInto
  [10] AbstractPipeline.wrapAndCopyInto
  [11] ReduceOps$ReduceOp.evaluateSequential
  [12] AbstractPipeline.evaluate
  [13] IntPipeline.reduce
  [14] IntPipeline.sum
  [15] Cell.calculateNextState
  [16] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [17] Iterable.forEach
  [18] CellsGroup.run
  [19] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-6 tid=125798]

--- 340166571 ns (0.07%), 34 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue$Node.casNext
  [ 3] LinkedTransferQueue.xfer
  [ 4] LinkedTransferQueue.put
  [ 5] BlockingTransfer.put
  [ 6] Channel.put
  [ 7] Cell.calculateNextState
  [ 8] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-8 tid=125800]

--- 330258486 ns (0.07%), 33 samples
  [ 0] Channel.take
  [ 1] TickPerCell.waitTick
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-8 tid=125800]

--- 330156923 ns (0.07%), 33 samples
  [ 0] ___pthread_cond_signal
  [ 1] Unsafe.unpark
  [ 2] LockSupport.unpark
  [ 3] LinkedTransferQueue$Node.tryMatch
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.put
  [ 6] BlockingTransfer.put
  [ 7] Channel.put
  [ 8] Cell.calculateNextState
  [ 9] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-2 tid=125794]

--- 330102034 ns (0.07%), 33 samples
  [ 0] LockSupport.unpark
  [ 1] LinkedTransferQueue$Node.tryMatch
  [ 2] LinkedTransferQueue.xfer
  [ 3] LinkedTransferQueue.take
  [ 4] BlockingTransfer.take
  [ 5] Channel.take
  [ 6] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 7] ReferencePipeline$3$1.accept
  [ 8] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 9] AbstractPipeline.copyInto
  [10] AbstractPipeline.wrapAndCopyInto
  [11] ReduceOps$ReduceOp.evaluateSequential
  [12] AbstractPipeline.evaluate
  [13] IntPipeline.reduce
  [14] IntPipeline.sum
  [15] Cell.calculateNextState
  [16] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [17] Iterable.forEach
  [18] CellsGroup.run
  [19] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-2 tid=125794]

--- 330098327 ns (0.07%), 33 samples
  [ 0] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 1] Iterable.forEach
  [ 2] CellsGroup.run
  [ 3] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 4] ThreadPoolExecutor.runWorker
  [ 5] ThreadPoolExecutor$Worker.run
  [ 6] Thread.run
  [ 7] [Thread-4 tid=125796]

--- 330092244 ns (0.07%), 33 samples
  [ 0] ReferencePipeline$3$1.accept
  [ 1] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 2] AbstractPipeline.copyInto
  [ 3] AbstractPipeline.wrapAndCopyInto
  [ 4] ReduceOps$ReduceOp.evaluateSequential
  [ 5] AbstractPipeline.evaluate
  [ 6] IntPipeline.reduce
  [ 7] IntPipeline.sum
  [ 8] Cell.calculateNextState
  [ 9] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-8 tid=125800]

--- 320541963 ns (0.07%), 32 samples
  [ 0] LinkedTransferQueue.skipDeadNodesNearHead
  [ 1] LinkedTransferQueue.xfer
  [ 2] LinkedTransferQueue.put
  [ 3] BlockingTransfer.put
  [ 4] Channel.put
  [ 5] TickPerCell.lambda$tick$0
  [ 6] TickPerCell$$Lambda$50.0x0000000801035ec0.accept
  [ 7] ChannelsGrid.lambda$forEachChannel$0
  [ 8] ChannelsGrid$$Lambda$51.0x00000008010360d8.accept
  [ 9] Dimensions.forEachRowCol
  [10] ChannelsGrid.forEachChannel
  [11] TickPerCell.tick
  [12] GameOfLife.calculateFrame
  [13] GameOfLife.lambda$calculateFrameBlocking$4
  [14] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-9 tid=125801]

--- 320143872 ns (0.07%), 32 samples
  [ 0] ArrayList.forEach
  [ 1] Cell.notifyLiveness
  [ 2] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 3] Iterable.forEach
  [ 4] CellsGroup.run
  [ 5] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 6] ThreadPoolExecutor.runWorker
  [ 7] ThreadPoolExecutor$Worker.run
  [ 8] Thread.run
  [ 9] [Thread-2 tid=125794]

--- 320120291 ns (0.07%), 32 samples
  [ 0] Channel.take
  [ 1] TickPerCell.waitTick
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-7 tid=125799]

--- 300760981 ns (0.06%), 30 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue$Node.casNext
  [ 3] LinkedTransferQueue.xfer
  [ 4] LinkedTransferQueue.take
  [ 5] BlockingTransfer.take
  [ 6] Channel.take
  [ 7] GameOfLife$$Lambda$53.0x0000000801036518.test
  [ 8] ChannelsGrid.lambda$forEachChannel$1
  [ 9] ChannelsGrid$$Lambda$54.0x0000000801036750.accept
  [10] Dimensions.forEachRowCol
  [11] ChannelsGrid.forEachChannel
  [12] GameOfLife.calculateFrame
  [13] GameOfLife.lambda$calculateFrameBlocking$4
  [14] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-9 tid=125801]

--- 300513849 ns (0.06%), 30 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] GameOfLife$$Lambda$53.0x0000000801036518.test
  [ 5] ChannelsGrid.lambda$forEachChannel$1
  [ 6] ChannelsGrid$$Lambda$54.0x0000000801036750.accept
  [ 7] Dimensions.forEachRowCol
  [ 8] ChannelsGrid.forEachChannel
  [ 9] GameOfLife.calculateFrame
  [10] GameOfLife.lambda$calculateFrameBlocking$4
  [11] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-9 tid=125801]

--- 300162171 ns (0.06%), 30 samples
  [ 0] ArrayList.forEach
  [ 1] Cell.notifyLiveness
  [ 2] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 3] Iterable.forEach
  [ 4] CellsGroup.run
  [ 5] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 6] ThreadPoolExecutor.runWorker
  [ 7] ThreadPoolExecutor$Worker.run
  [ 8] Thread.run
  [ 9] [Thread-5 tid=125797]

--- 300160994 ns (0.06%), 30 samples
  [ 0] Cell.notifyLiveness
  [ 1] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 2] Iterable.forEach
  [ 3] CellsGroup.run
  [ 4] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 5] ThreadPoolExecutor.runWorker
  [ 6] ThreadPoolExecutor$Worker.run
  [ 7] Thread.run
  [ 8] [Thread-5 tid=125797]

--- 300140711 ns (0.06%), 30 samples
  [ 0] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 1] Iterable.forEach
  [ 2] CellsGroup.run
  [ 3] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 4] ThreadPoolExecutor.runWorker
  [ 5] ThreadPoolExecutor$Worker.run
  [ 6] Thread.run
  [ 7] [Thread-2 tid=125794]

--- 290435840 ns (0.06%), 29 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.put
  [ 2] BlockingTransfer.put
  [ 3] Channel.put
  [ 4] TickPerCell.lambda$tick$0
  [ 5] TickPerCell$$Lambda$50.0x0000000801035ec0.accept
  [ 6] ChannelsGrid.lambda$forEachChannel$0
  [ 7] ChannelsGrid$$Lambda$51.0x00000008010360d8.accept
  [ 8] Dimensions.forEachRowCol
  [ 9] ChannelsGrid.forEachChannel
  [10] TickPerCell.tick
  [11] GameOfLife.calculateFrame
  [12] GameOfLife.lambda$calculateFrameBlocking$4
  [13] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-9 tid=125801]

--- 290070093 ns (0.06%), 29 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-4 tid=125796]

--- 280205515 ns (0.06%), 28 samples
  [ 0] ArrayList.forEach
  [ 1] Cell.notifyLiveness
  [ 2] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 3] Iterable.forEach
  [ 4] CellsGroup.run
  [ 5] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 6] ThreadPoolExecutor.runWorker
  [ 7] ThreadPoolExecutor$Worker.run
  [ 8] Thread.run
  [ 9] [Thread-7 tid=125799]

--- 280149702 ns (0.06%), 28 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue.casHead
  [ 3] LinkedTransferQueue.skipDeadNodesNearHead
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] TickPerCell.waitTick
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-6 tid=125798]

--- 280149552 ns (0.06%), 28 samples
  [ 0] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 1] Iterable.forEach
  [ 2] CellsGroup.run
  [ 3] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 4] ThreadPoolExecutor.runWorker
  [ 5] ThreadPoolExecutor$Worker.run
  [ 6] Thread.run
  [ 7] [Thread-8 tid=125800]

--- 280093902 ns (0.06%), 28 samples
  [ 0] ArrayList.elementAt
  [ 1] ArrayList.forEach
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-2 tid=125794]

--- 270180168 ns (0.06%), 27 samples
  [ 0] ArrayList.elementAt
  [ 1] ArrayList.forEach
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-5 tid=125797]

--- 270165655 ns (0.06%), 27 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue.casHead
  [ 3] LinkedTransferQueue.skipDeadNodesNearHead
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] TickPerCell.waitTick
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-3 tid=125795]

--- 270088389 ns (0.06%), 27 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-3 tid=125795]

--- 270058682 ns (0.06%), 27 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.put
  [ 2] BlockingTransfer.put
  [ 3] Channel.put
  [ 4] Cell.calculateNextState
  [ 5] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 6] Iterable.forEach
  [ 7] CellsGroup.run
  [ 8] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 9] ThreadPoolExecutor.runWorker
  [10] ThreadPoolExecutor$Worker.run
  [11] Thread.run
  [12] [Thread-3 tid=125795]

--- 270003390 ns (0.06%), 27 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-6 tid=125798]

--- 260569222 ns (0.06%), 26 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue$Node.casItem
  [ 3] LinkedTransferQueue$Node.tryMatch
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.put
  [ 6] BlockingTransfer.put
  [ 7] Channel.put
  [ 8] TickPerCell.lambda$tick$0
  [ 9] TickPerCell$$Lambda$50.0x0000000801035ec0.accept
  [10] ChannelsGrid.lambda$forEachChannel$0
  [11] ChannelsGrid$$Lambda$51.0x00000008010360d8.accept
  [12] Dimensions.forEachRowCol
  [13] ChannelsGrid.forEachChannel
  [14] TickPerCell.tick
  [15] GameOfLife.calculateFrame
  [16] GameOfLife.lambda$calculateFrameBlocking$4
  [17] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-9 tid=125801]

--- 260483752 ns (0.06%), 26 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.put
  [ 2] BlockingTransfer.put
  [ 3] Channel.put
  [ 4] TickPerCell.lambda$tick$0
  [ 5] TickPerCell$$Lambda$50.0x0000000801035ec0.accept
  [ 6] ChannelsGrid.lambda$forEachChannel$0
  [ 7] ChannelsGrid$$Lambda$51.0x00000008010360d8.accept
  [ 8] Dimensions.forEachRowCol
  [ 9] ChannelsGrid.forEachChannel
  [10] TickPerCell.tick
  [11] GameOfLife.calculateFrame
  [12] GameOfLife.lambda$calculateFrameBlocking$4
  [13] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-9 tid=125801]

--- 260411056 ns (0.06%), 26 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.put
  [ 2] BlockingTransfer.put
  [ 3] Channel.put
  [ 4] TickPerCell.lambda$tick$0
  [ 5] TickPerCell$$Lambda$50.0x0000000801035ec0.accept
  [ 6] ChannelsGrid.lambda$forEachChannel$0
  [ 7] ChannelsGrid$$Lambda$51.0x00000008010360d8.accept
  [ 8] Dimensions.forEachRowCol
  [ 9] ChannelsGrid.forEachChannel
  [10] TickPerCell.tick
  [11] GameOfLife.calculateFrame
  [12] GameOfLife.lambda$calculateFrameBlocking$4
  [13] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-9 tid=125801]

--- 260343971 ns (0.06%), 26 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] GameOfLife$$Lambda$53.0x0000000801036518.test
  [ 5] ChannelsGrid.lambda$forEachChannel$1
  [ 6] ChannelsGrid$$Lambda$54.0x0000000801036750.accept
  [ 7] Dimensions.forEachRowCol
  [ 8] ChannelsGrid.forEachChannel
  [ 9] GameOfLife.calculateFrame
  [10] GameOfLife.lambda$calculateFrameBlocking$4
  [11] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-9 tid=125801]

--- 260186124 ns (0.06%), 26 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue.casHead
  [ 3] LinkedTransferQueue.skipDeadNodesNearHead
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] TickPerCell.waitTick
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-2 tid=125794]

--- 260128605 ns (0.06%), 26 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-3 tid=125795]

--- 260109805 ns (0.06%), 26 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-2 tid=125794]

--- 260090269 ns (0.06%), 26 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-8 tid=125800]

--- 260087588 ns (0.06%), 26 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-4 tid=125796]

--- 260041812 ns (0.06%), 26 samples
  [ 0] ReferencePipeline$3.opWrapSink
  [ 1] AbstractPipeline.wrapSink
  [ 2] AbstractPipeline.wrapAndCopyInto
  [ 3] ReduceOps$ReduceOp.evaluateSequential
  [ 4] AbstractPipeline.evaluate
  [ 5] IntPipeline.reduce
  [ 6] IntPipeline.sum
  [ 7] Cell.calculateNextState
  [ 8] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-6 tid=125798]

--- 250157074 ns (0.05%), 25 samples
  [ 0] VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] VarHandleGuards.guard_LLL_Z
  [ 2] LinkedTransferQueue.casHead
  [ 3] LinkedTransferQueue.skipDeadNodesNearHead
  [ 4] LinkedTransferQueue.xfer
  [ 5] LinkedTransferQueue.take
  [ 6] BlockingTransfer.take
  [ 7] Channel.take
  [ 8] TickPerCell.waitTick
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-4 tid=125796]

--- 250148044 ns (0.05%), 25 samples
  [ 0] LockSupport.unpark
  [ 1] LinkedTransferQueue$Node.tryMatch
  [ 2] LinkedTransferQueue.xfer
  [ 3] LinkedTransferQueue.take
  [ 4] BlockingTransfer.take
  [ 5] Channel.take
  [ 6] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 7] ReferencePipeline$3$1.accept
  [ 8] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 9] AbstractPipeline.copyInto
  [10] AbstractPipeline.wrapAndCopyInto
  [11] ReduceOps$ReduceOp.evaluateSequential
  [12] AbstractPipeline.evaluate
  [13] IntPipeline.reduce
  [14] IntPipeline.sum
  [15] Cell.calculateNextState
  [16] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [17] Iterable.forEach
  [18] CellsGroup.run
  [19] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-7 tid=125799]

--- 250145555 ns (0.05%), 25 samples
  [ 0] ReferencePipeline$3.opWrapSink
  [ 1] AbstractPipeline.wrapSink
  [ 2] AbstractPipeline.wrapAndCopyInto
  [ 3] ReduceOps$ReduceOp.evaluateSequential
  [ 4] AbstractPipeline.evaluate
  [ 5] IntPipeline.reduce
  [ 6] IntPipeline.sum
  [ 7] Cell.calculateNextState
  [ 8] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-8 tid=125800]

--- 250101105 ns (0.05%), 25 samples
  [ 0] AbstractPipeline.<init>
  [ 1] ReferencePipeline.<init>
  [ 2] ReferencePipeline$Head.<init>
  [ 3] StreamSupport.stream
  [ 4] Collection.stream
  [ 5] Cell.calculateNextState
  [ 6] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-2 tid=125794]

--- 250100027 ns (0.05%), 25 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-5 tid=125797]

--- 250082129 ns (0.05%), 25 samples
  [ 0] LockSupport.unpark
  [ 1] LinkedTransferQueue$Node.tryMatch
  [ 2] LinkedTransferQueue.xfer
  [ 3] LinkedTransferQueue.take
  [ 4] BlockingTransfer.take
  [ 5] Channel.take
  [ 6] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 7] ReferencePipeline$3$1.accept
  [ 8] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 9] AbstractPipeline.copyInto
  [10] AbstractPipeline.wrapAndCopyInto
  [11] ReduceOps$ReduceOp.evaluateSequential
  [12] AbstractPipeline.evaluate
  [13] IntPipeline.reduce
  [14] IntPipeline.sum
  [15] Cell.calculateNextState
  [16] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [17] Iterable.forEach
  [18] CellsGroup.run
  [19] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-8 tid=125800]

--- 250063177 ns (0.05%), 25 samples
  [ 0] ArrayList.elementAt
  [ 1] ArrayList.forEach
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-3 tid=125795]

--- 250060159 ns (0.05%), 25 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-8 tid=125800]

--- 250014004 ns (0.05%), 25 samples
  [ 0] ReferencePipeline$3.opWrapSink
  [ 1] AbstractPipeline.wrapSink
  [ 2] AbstractPipeline.wrapAndCopyInto
  [ 3] ReduceOps$ReduceOp.evaluateSequential
  [ 4] AbstractPipeline.evaluate
  [ 5] IntPipeline.reduce
  [ 6] IntPipeline.sum
  [ 7] Cell.calculateNextState
  [ 8] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-3 tid=125795]

--- 240441735 ns (0.05%), 24 samples
  [ 0] _raw_spin_unlock_irqrestore_[k]
  [ 1] try_to_wake_up_[k]
  [ 2] wake_up_q_[k]
  [ 3] futex_wake_[k]
  [ 4] do_futex_[k]
  [ 5] __x64_sys_futex_[k]
  [ 6] do_syscall_64_[k]
  [ 7] entry_SYSCALL_64_after_hwframe_[k]
  [ 8] ___pthread_cond_signal
  [ 9] Unsafe.unpark
  [10] LockSupport.unpark
  [11] LinkedTransferQueue$Node.tryMatch
  [12] LinkedTransferQueue.xfer
  [13] LinkedTransferQueue.put
  [14] BlockingTransfer.put
  [15] Channel.put
  [16] Cell.calculateNextState
  [17] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [18] Iterable.forEach
  [19] CellsGroup.run
  [20] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [21] ThreadPoolExecutor.runWorker
  [22] ThreadPoolExecutor$Worker.run
  [23] Thread.run
  [24] [Thread-2 tid=125794]

--- 240281424 ns (0.05%), 24 samples
  [ 0] Channel.take
  [ 1] TickPerCell.waitTick
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-6 tid=125798]

--- 240137856 ns (0.05%), 24 samples
  [ 0] LinkedTransferQueue.xfer
  [ 1] LinkedTransferQueue.take
  [ 2] BlockingTransfer.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-5 tid=125797]

--- 240120133 ns (0.05%), 24 samples
  [ 0] Channel.take
  [ 1] TickPerCell.waitTick
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-6 tid=125798]

--- 240109574 ns (0.05%), 24 samples
  [ 0] ArrayList.forEach
  [ 1] Cell.notifyLiveness
  [ 2] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 3] Iterable.forEach
  [ 4] CellsGroup.run
  [ 5] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 6] ThreadPoolExecutor.runWorker
  [ 7] ThreadPoolExecutor$Worker.run
  [ 8] Thread.run
  [ 9] [Thread-4 tid=125796]

--- 230105336 ns (0.05%), 23 samples
  [ 0] Cell.notifyLiveness
  [ 1] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 2] Iterable.forEach
  [ 3] CellsGroup.run
  [ 4] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 5] ThreadPoolExecutor.runWorker
  [ 6] ThreadPoolExecutor$Worker.run
  [ 7] Thread.run
  [ 8] [Thread-4 tid=125796]

--- 230103019 ns (0.05%), 23 samples
  [ 0] Collection.stream
  [ 1] Cell.calculateNextState
  [ 2] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [ 3] Iterable.forEach
  [ 4] CellsGroup.run
  [ 5] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 6] ThreadPoolExecutor.runWorker
  [ 7] ThreadPoolExecutor$Worker.run
  [ 8] Thread.run
  [ 9] [Thread-5 tid=125797]

--- 230095161 ns (0.05%), 23 samples
  [ 0] LockSupport.unpark
  [ 1] LinkedTransferQueue$Node.tryMatch
  [ 2] LinkedTransferQueue.xfer
  [ 3] LinkedTransferQueue.take
  [ 4] BlockingTransfer.take
  [ 5] Channel.take
  [ 6] Cell$$Lambda$57.0x0000000801036db0.apply
  [ 7] ReferencePipeline$3$1.accept
  [ 8] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 9] AbstractPipeline.copyInto
  [10] AbstractPipeline.wrapAndCopyInto
  [11] ReduceOps$ReduceOp.evaluateSequential
  [12] AbstractPipeline.evaluate
  [13] IntPipeline.reduce
  [14] IntPipeline.sum
  [15] Cell.calculateNextState
  [16] CellsGroup$$Lambda$55.0x0000000801036970.accept
  [17] Iterable.forEach
  [18] CellsGroup.run
  [19] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-5 tid=125797]

          ns  percent  samples  top
  ----------  -------  -------  ---
110659528516   23.85%    11060  Cell.lambda$notifyLiveness$0
 86329521514   18.61%     8628  LinkedTransferQueue.xfer
 65235797502   14.06%     6520  VarHandleReferences$FieldInstanceReadWrite.compareAndSet
 36584152984    7.88%     3657  ReduceOps$5ReducingSink.get
 33384065465    7.20%     3337  Cell$$Lambda$57.0x0000000801036db0.apply
 27787191975    5.99%     2777  LinkedTransferQueue.skipDeadNodesNearHead
 11346771270    2.45%     1134  CellsGroup$$Lambda$46.0x0000000801035478.accept
  9444088546    2.04%      944  Channel.take
  9256956331    2.00%      924  Dimensions.forEachRowCol
  5343000300    1.15%      534  ArrayList.forEach
  4471771620    0.96%      447  ArrayList$ArrayListSpliterator.forEachRemaining
  4432383401    0.96%      443  Cell.notifyLiveness
  3581170862    0.77%      358  ReferencePipeline$3$1.accept
  3452245300    0.74%      344  __schedule_[k]
  3419092498    0.74%      341  sched_yield
  2491312176    0.54%      249  LockSupport.unpark
  2231222470    0.48%      223  ArrayList.elementAt
  2080848085    0.45%      208  AbstractPipeline.<init>
  2080700638    0.45%      208  ReferencePipeline$3.opWrapSink
  2080694203    0.45%      208  Sink$ChainedReference.<init>
  2041034782    0.44%      204  Cell$$Lambda$52.0x00000008010362f8.accept
  1830573728    0.39%      183  ReferencePipeline$4$1.accept
  1715785452    0.37%      171  syscall_enter_from_user_mode_[k]
  1646023888    0.35%      164  _raw_spin_unlock_irqrestore_[k]
  1550649191    0.33%      155  Collection.stream
  1440715431    0.31%      144  ChannelsGrid.getChannel
  1340513393    0.29%      134  ReferencePipeline$4.opWrapSink
  1190445261    0.26%      119  AbstractPipeline.wrapSink
  1110488853    0.24%      111  BlockingTransfer.take
  1010485841    0.22%      101  Sink$ChainedReference.begin
  1010365590    0.22%      101  Objects.requireNonNull
  1010311832    0.22%      101  ArrayList$SubList$1.next
  1000233154    0.22%      100  StreamSupport.stream
   993207340    0.21%       99  __futex_abstimed_wait_common
   940401374    0.20%       94  vtable stub
   780882424    0.17%       78  ___pthread_cond_signal
   700530939    0.15%       70  LinkedTransferQueue$Node.tryMatch
   700205411    0.15%       70  PipelineHelper.<init>
   680273274    0.15%       68  Iterable.forEach
   590345106    0.13%       59  ReduceOps$5ReducingSink.accept
   571639856    0.12%       57  LinkedTransferQueue.awaitMatch
   551517558    0.12%       55  __lll_lock_wake
   520379791    0.11%       52  Channel.put
   520110538    0.11%       52  Sink$ChainedReference.end
   491678704    0.11%       49  do_sched_yield_[k]
   490240147    0.11%       49  Boolean.booleanValue
   450223981    0.10%       45  LinkedTransferQueue.put
   430782169    0.09%       43  update_blocked_averages_[k]
   420097903    0.09%       42  CellsGroup$$Lambda$55.0x0000000801036970.accept
   380838390    0.08%       38  finish_task_switch.isra.0_[k]
   320317843    0.07%       32  Unsafe_Park
   300106999    0.06%       30  ArrayList$ArrayListSpliterator.<init>
   280131226    0.06%       28  ArrayList$SubList$1.checkForComodification
   280119368    0.06%       28  ArrayList.spliterator
   250537659    0.05%       25  Parker::park(bool, long)
   220109231    0.05%       22  Cell.calculateNextState
   210180187    0.05%       21  LinkedTransferQueue.take
   200712129    0.04%       20  schedule_[k]
   200406711    0.04%       20  futex_wake_[k]
   200183314    0.04%       20  LinkedTransferQueue$Node.<init>
   190276850    0.04%       19  ___pthread_cond_wait
   190168481    0.04%       19  G1ParScanThreadState::trim_queue_to_threshold(unsigned int)
   180859830    0.04%       18  exit_to_user_mode_prepare_[k]
   170300506    0.04%       17  Thread.yield0
   170199337    0.04%       17  ThreadPoolExecutor.runWorker
   140775983    0.03%       14  futex_q_lock_[k]
   140631649    0.03%       14  Unsafe_Unpark
   140288561    0.03%       14  __get_user_8_[k]
   140189399    0.03%       14  __memset_avx2_unaligned_erms
   120737882    0.03%       12  __pthread_mutex_unlock_usercnt
   120267666    0.03%       12  Unsafe.park
   120064457    0.03%       12  __GI___pthread_getspecific
   110508589    0.02%       11  __tls_get_addr
   110465526    0.02%       11  futex_wait_[k]
   110047620    0.02%       11  ReferencePipeline$3.<init>
   100543088    0.02%       10  preempt_count_add_[k]
   100403222    0.02%       10  futex_wake_mark_[k]
    90192292    0.02%        9  __softirqentry_text_start_[k]
    90077149    0.02%        9  __GI___pthread_mutex_lock
    90068635    0.02%        9  DirectMethodHandle.allocateInstance
    90049467    0.02%        9  AbstractPipeline.copyInto
    81648392    0.02%        8  GameOfLifeBenchmark_benchmark_jmhTest.benchmark_thrpt_jmhStub
    80382920    0.02%        8  JVM_Yield
    80203043    0.02%        8  do_syscall_64_[k]
    80123259    0.02%        8  __condvar_dec_grefs
    80045015    0.02%        8  CellsGroup.run
    80005523    0.02%        8  Cell$$Lambda$58.0x0000000801036fd8.applyAsInt
    70256324    0.02%        7  __get_user_nocheck_4_[k]
    70150849    0.02%        7  pthread_mutex_trylock@@GLIBC_2.34
    70136848    0.02%        7  ObjArrayKlass::multi_allocate(int, int*, JavaThread*)
    70082344    0.02%        7  do_futex_[k]
    70052411    0.02%        7  MemAllocator::allocate() const
    60501026    0.01%        6  I2C/C2I adapters
    60243141    0.01%        6  __GI___pthread_mutex_unlock
    60208767    0.01%        6  __x64_sys_sched_yield_[k]
    60187628    0.01%        6  G1CardSet::occupied() const
    60093762    0.01%        6  TickPerCell.lambda$tick$0
    60080741    0.01%        6  __x64_sys_futex_[k]
    60052192    0.01%        6  G1ScanHRForRegionClosure::scan_heap_roots(HeapRegion*)
    60026771    0.01%        6  Boolean.valueOf
    60025968    0.01%        6  ReferencePipeline.map
    60023001    0.01%        6  StreamOpFlag.fromCharacteristics
    51432853    0.01%        5  GameOfLife.calculateFrameBlocking
    50761143    0.01%        5  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<548964ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 548964ul>::oop_access_barrier(void*)
    50269532    0.01%        5  futex_wait_queue_[k]
    50268186    0.01%        5  __GI___pthread_disable_asynccancel
    50175891    0.01%        5  TypeArrayKlass::multi_allocate(int, int*, JavaThread*)
    50105238    0.01%        5  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<1335398ul, G1BarrierSet>, (AccessInternal::BarrierType)1, 1335398ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
    50104510    0.01%        5  G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*)
    50085786    0.01%        5  ObjArrayAllocator::initialize(HeapWordImpl**) const
    50072142    0.01%        5  ChannelsGrid.lambda$forEachChannel$0
    50062421    0.01%        5  Thread.interrupted
    50059549    0.01%        5  futex_hash_[k]
    50053833    0.01%        5  mem_cgroup_handle_over_high_[k]
    50044924    0.01%        5  G1CollectedHeap::fill_with_dummy_object(HeapWordImpl**, HeapWordImpl**, bool)
    50039159    0.01%        5  void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceKlass, narrowOop>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
    50032404    0.01%        5  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<286822ul, G1BarrierSet>, (AccessInternal::BarrierType)3, 286822ul>::oop_access_barrier(oopDesc*, long)
    50008036    0.01%        5  StreamOpFlag.combineOpFlags
    40287929    0.01%        4  LinkedTransferQueue$Node.block
    40225946    0.01%        4  G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*)
    40215683    0.01%        4  java_lang_Thread::thread(oopDesc*)
    40145677    0.01%        4  preempt_count_sub_[k]
    40137719    0.01%        4  debug_smp_processor_id_[k]
    40137239    0.01%        4  Klass::check_array_allocation_length(int, int, JavaThread*)
    40104984    0.01%        4  TickPerCell.tick
    40091388    0.01%        4  JavaThread::threadObj() const
    40058238    0.01%        4  rebalance_domains_[k]
    40053553    0.01%        4  ClassLoaderData::holder() const
    40051028    0.01%        4  ObjArrayKlass::allocate(int, JavaThread*)
    40049722    0.01%        4  ChannelsGrid$$Lambda$51.0x00000008010360d8.accept
    40048828    0.01%        4  _raw_spin_unlock_irq_[k]
    40019002    0.01%        4  __GI___pthread_enable_asynccancel
    40007784    0.01%        4  ReferencePipeline.<init>
    30403439    0.01%        3  in_lock_functions_[k]
    30298738    0.01%        3  Unsafe.unpark
    30252276    0.01%        3  __clock_gettime
    30085619    0.01%        3  queue_work_on_[k]
    30082285    0.01%        3  FreeListAllocator::reset()
    30062994    0.01%        3  ThreadLocalStorage::is_initialized()
    30056619    0.01%        3  __pthread_mutex_cond_lock
    30050022    0.01%        3  OptoRuntime::multianewarray2_C(Klass*, int, int, JavaThread*)
    30049640    0.01%        3  ForkJoinPool.unmanagedBlock
    30049538    0.01%        3  DirectMethodHandle$Holder.newInvokeSpecial
    30048939    0.01%        3  Parker::unpark()
    30046511    0.01%        3  java_lang_Thread::set_thread_status(oopDesc*, JavaThreadStatus)
    30046483    0.01%        3  HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
    30046147    0.01%        3  Thread.yield
    30045813    0.01%        3  G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const
    30042746    0.01%        3  syscall_exit_to_user_mode_prepare_[k]
    30040454    0.01%        3  blkcg_maybe_throttle_current_[k]
    30026238    0.01%        3  SafeThreadsListPtr::release_stable_list()
    30026017    0.01%        3  G1DirtyCardQueueSet::num_par_ids()
    30024132    0.01%        3  CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*)
    30020552    0.01%        3  ThreadsListHandle::ThreadsListHandle(Thread*)
    30015090    0.01%        3  ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**)
    30008261    0.01%        3  HeapRegion::fill_with_dummy_object(HeapWordImpl**, unsigned long, bool)
    30007367    0.01%        3  JavaFrameAnchor::make_walkable()
    29994056    0.01%        3  G1CollectedHeap::attempt_allocation_slow(unsigned long)
    20486811    0.00%        2  _pthread_cleanup_pop@@GLIBC_2.34
    20424645    0.00%        2  GameOfLifeBenchmark.benchmark
    20223494    0.00%        2  __rseq_handle_notify_resume_[k]
    20113478    0.00%        2  Invokers$Holder.linkToTargetMethod
    20076420    0.00%        2  OptoRuntime::new_instance_C(Klass*, JavaThread*)
    20066691    0.00%        2  syscall_exit_to_user_mode_[k]
    20064026    0.00%        2  __futex_unqueue_[k]
    20061668    0.00%        2  MemAllocator::Allocation::check_out_of_memory()
    20046095    0.00%        2  plist_add_[k]
    20042039    0.00%        2  G1SegmentedArray::num_segments() const
    20033431    0.00%        2  __condvar_confirm_wakeup
    20030468    0.00%        2  G1CardSetMemoryManager::memory_stats() const
    20028160    0.00%        2  AbstractQueuedSynchronizer$ConditionNode.isReleasable
    20027766    0.00%        2  MemAllocator::Allocation::notify_allocation_jvmti_sampler()
    20025674    0.00%        2  run_rebalance_domains_[k]
    20025386    0.00%        2  ObjAllocator::initialize(HeapWordImpl**) const
    20025005    0.00%        2  get_futex_key_[k]
    20023831    0.00%        2  JfrAllocationTracer::JfrAllocationTracer(Klass const*, HeapWordImpl**, unsigned long, bool, JavaThread*)
    20018432    0.00%        2  __tls_get_addr@plt
    20018142    0.00%        2  HeapRegion::set_eden()
    20017934    0.00%        2  ConstantPool::impl_signature_ref_at(int, bool)
    20017368    0.00%        2  rcu_core_[k]
    20015010    0.00%        2  __vdso_clock_gettime
    20011614    0.00%        2  G1Policy::preventive_collection_required(unsigned int)
    20007060    0.00%        2  java_lang_Thread::get_thread_status(oopDesc*)
    20005612    0.00%        2  HeapRegionTracer::send_region_type_change(unsigned int, G1HeapRegionTraceType::Type, G1HeapRegionTraceType::Type, unsigned long, unsigned long)
    20003002    0.00%        2  LambdaForm$MH.0x0000000801002800.invoke
    20001272    0.00%        2  pthread_mutex_unlock@plt
    19994420    0.00%        2  HeapRegionManager::allocate_free_region(HeapRegionType, unsigned int)
    19994396    0.00%        2  void OopOopIterateDispatch<G1ScanCardClosure>::Table::oop_oop_iterate<InstanceKlass, narrowOop>(G1ScanCardClosure*, oopDesc*, Klass*)
    10365204    0.00%        1  Blackhole.consume
    10224871    0.00%        1  PerfLongVariant::sample()
    10209330    0.00%        1  __list_del_entry_valid_[k]
    10205628    0.00%        1  ReentrantLock$NonfairSync.initialTryLock
    10062122    0.00%        1  LinkedTransferQueue$Node.isReleasable
    10050796    0.00%        1  blk_mq_free_request_[k]
    10038852    0.00%        1  rcu_cblist_dequeue_[k]
    10038584    0.00%        1  GameOfLife.calculateFrame
    10035950    0.00%        1  _raw_spin_lock_[k]
    10032935    0.00%        1  PhaseChaitin::gather_lrg_masks(bool)
    10031404    0.00%        1  check_preemption_disabled_[k]
    10030020    0.00%        1  ThreadPoolExecutor.beforeExecute
