--- Execution profile ---
Total samples       : 43906
unknown_Java        : 342 (0.78%)

--- 7515804672 ns (1.70%), 750 samples
  [ 0] Cell.lambda$notifyLiveness$0
  [ 1] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 2] ArrayList.forEach
  [ 3] Cell.notifyLiveness
  [ 4] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-6 tid=161116]

--- 7446239460 ns (1.69%), 743 samples
  [ 0] Cell.lambda$notifyLiveness$0
  [ 1] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 2] ArrayList.forEach
  [ 3] Cell.notifyLiveness
  [ 4] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-7 tid=161117]

--- 7124499983 ns (1.62%), 711 samples
  [ 0] Cell.lambda$notifyLiveness$0
  [ 1] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 2] ArrayList.forEach
  [ 3] Cell.notifyLiveness
  [ 4] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-4 tid=161114]

--- 7094306486 ns (1.61%), 708 samples
  [ 0] Cell.lambda$notifyLiveness$0
  [ 1] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 2] ArrayList.forEach
  [ 3] Cell.notifyLiveness
  [ 4] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-3 tid=161113]

--- 6709882273 ns (1.52%), 669 samples
  [ 0] Cell.lambda$notifyLiveness$0
  [ 1] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 2] ArrayList.forEach
  [ 3] Cell.notifyLiveness
  [ 4] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-8 tid=161118]

--- 6704046013 ns (1.52%), 669 samples
  [ 0] Cell.lambda$notifyLiveness$0
  [ 1] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 2] ArrayList.forEach
  [ 3] Cell.notifyLiveness
  [ 4] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-5 tid=161115]

--- 6653763792 ns (1.51%), 664 samples
  [ 0] ReduceOps$5ReducingSink.get
  [ 1] ReduceOps$5ReducingSink.get
  [ 2] ReduceOps$ReduceOp.evaluateSequential
  [ 3] AbstractPipeline.evaluate
  [ 4] IntPipeline.reduce
  [ 5] IntPipeline.sum
  [ 6] Cell.calculateNextState
  [ 7] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-5 tid=161115]

--- 6632997290 ns (1.50%), 662 samples
  [ 0] ReduceOps$5ReducingSink.get
  [ 1] ReduceOps$5ReducingSink.get
  [ 2] ReduceOps$ReduceOp.evaluateSequential
  [ 3] AbstractPipeline.evaluate
  [ 4] IntPipeline.reduce
  [ 5] IntPipeline.sum
  [ 6] Cell.calculateNextState
  [ 7] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-3 tid=161113]

--- 6422552177 ns (1.46%), 641 samples
  [ 0] ReduceOps$5ReducingSink.get
  [ 1] ReduceOps$5ReducingSink.get
  [ 2] ReduceOps$ReduceOp.evaluateSequential
  [ 3] AbstractPipeline.evaluate
  [ 4] IntPipeline.reduce
  [ 5] IntPipeline.sum
  [ 6] Cell.calculateNextState
  [ 7] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-6 tid=161116]

--- 6383011946 ns (1.45%), 637 samples
  [ 0] ReduceOps$5ReducingSink.get
  [ 1] ReduceOps$5ReducingSink.get
  [ 2] ReduceOps$ReduceOp.evaluateSequential
  [ 3] AbstractPipeline.evaluate
  [ 4] IntPipeline.reduce
  [ 5] IntPipeline.sum
  [ 6] Cell.calculateNextState
  [ 7] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-2 tid=161112]

--- 6292365613 ns (1.43%), 628 samples
  [ 0] ReduceOps$5ReducingSink.get
  [ 1] ReduceOps$5ReducingSink.get
  [ 2] ReduceOps$ReduceOp.evaluateSequential
  [ 3] AbstractPipeline.evaluate
  [ 4] IntPipeline.reduce
  [ 5] IntPipeline.sum
  [ 6] Cell.calculateNextState
  [ 7] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-4 tid=161114]

--- 6092198179 ns (1.38%), 608 samples
  [ 0] ReduceOps$5ReducingSink.get
  [ 1] ReduceOps$5ReducingSink.get
  [ 2] ReduceOps$ReduceOp.evaluateSequential
  [ 3] AbstractPipeline.evaluate
  [ 4] IntPipeline.reduce
  [ 5] IntPipeline.sum
  [ 6] Cell.calculateNextState
  [ 7] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-7 tid=161117]

--- 6052185104 ns (1.37%), 604 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LockedSingleValue.take
  [ 5] Channel.take
  [ 6] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 7] ReferencePipeline$3$1.accept
  [ 8] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 9] AbstractPipeline.copyInto
  [10] AbstractPipeline.wrapAndCopyInto
  [11] ReduceOps$ReduceOp.evaluateSequential
  [12] AbstractPipeline.evaluate
  [13] IntPipeline.reduce
  [14] IntPipeline.sum
  [15] Cell.calculateNextState
  [16] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [17] Iterable.forEach
  [18] CellsGroup.run
  [19] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-5 tid=161115]

--- 5911774721 ns (1.34%), 590 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LockedSingleValue.take
  [ 5] Channel.take
  [ 6] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 7] ReferencePipeline$3$1.accept
  [ 8] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 9] AbstractPipeline.copyInto
  [10] AbstractPipeline.wrapAndCopyInto
  [11] ReduceOps$ReduceOp.evaluateSequential
  [12] AbstractPipeline.evaluate
  [13] IntPipeline.reduce
  [14] IntPipeline.sum
  [15] Cell.calculateNextState
  [16] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [17] Iterable.forEach
  [18] CellsGroup.run
  [19] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-6 tid=161116]

--- 5851895700 ns (1.33%), 584 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LockedSingleValue.put
  [ 5] Channel.put
  [ 6] Cell.lambda$notifyLiveness$0
  [ 7] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 8] ArrayList.forEach
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-6 tid=161116]

--- 5826983389 ns (1.32%), 581 samples
  [ 0] ReduceOps$5ReducingSink.get
  [ 1] ReduceOps$5ReducingSink.get
  [ 2] ReduceOps$ReduceOp.evaluateSequential
  [ 3] AbstractPipeline.evaluate
  [ 4] IntPipeline.reduce
  [ 5] IntPipeline.sum
  [ 6] Cell.calculateNextState
  [ 7] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-8 tid=161118]

--- 5732035204 ns (1.30%), 572 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LockedSingleValue.put
  [ 5] Channel.put
  [ 6] Cell.lambda$notifyLiveness$0
  [ 7] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 8] ArrayList.forEach
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-7 tid=161117]

--- 5731613959 ns (1.30%), 572 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LockedSingleValue.put
  [ 5] Channel.put
  [ 6] Cell.lambda$notifyLiveness$0
  [ 7] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 8] ArrayList.forEach
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-5 tid=161115]

--- 5664058938 ns (1.28%), 558 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LockedSingleValue.take
  [ 5] Channel.take
  [ 6] GameOfLife$$Lambda$62.0x0000000801037840.test
  [ 7] ChannelsGrid.lambda$forEachChannel$1
  [ 8] ChannelsGrid$$Lambda$66.0x0000000801033208.accept
  [ 9] Dimensions.forEachRowCol
  [10] ChannelsGrid.forEachChannel
  [11] GameOfLife.calculateFrame
  [12] GameOfLife.lambda$calculateFrameBlocking$4
  [13] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-9 tid=161119]

--- 5590969338 ns (1.27%), 558 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LockedSingleValue.take
  [ 5] Channel.take
  [ 6] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 7] ReferencePipeline$3$1.accept
  [ 8] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 9] AbstractPipeline.copyInto
  [10] AbstractPipeline.wrapAndCopyInto
  [11] ReduceOps$ReduceOp.evaluateSequential
  [12] AbstractPipeline.evaluate
  [13] IntPipeline.reduce
  [14] IntPipeline.sum
  [15] Cell.calculateNextState
  [16] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [17] Iterable.forEach
  [18] CellsGroup.run
  [19] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-4 tid=161114]

--- 5481253462 ns (1.24%), 547 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LockedSingleValue.take
  [ 5] Channel.take
  [ 6] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 7] ReferencePipeline$3$1.accept
  [ 8] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 9] AbstractPipeline.copyInto
  [10] AbstractPipeline.wrapAndCopyInto
  [11] ReduceOps$ReduceOp.evaluateSequential
  [12] AbstractPipeline.evaluate
  [13] IntPipeline.reduce
  [14] IntPipeline.sum
  [15] Cell.calculateNextState
  [16] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [17] Iterable.forEach
  [18] CellsGroup.run
  [19] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-7 tid=161117]

--- 5390919843 ns (1.22%), 538 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LockedSingleValue.put
  [ 5] Channel.put
  [ 6] Cell.lambda$notifyLiveness$0
  [ 7] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 8] ArrayList.forEach
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-4 tid=161114]

--- 5266952691 ns (1.19%), 519 samples
  [ 0] __futex_abstimed_wait_common
  [ 1] Unsafe.park
  [ 2] LockSupport.park
  [ 3] AbstractQueuedSynchronizer$ConditionNode.block
  [ 4] ForkJoinPool.unmanagedBlock
  [ 5] ForkJoinPool.managedBlock
  [ 6] AbstractQueuedSynchronizer$ConditionObject.await
  [ 7] LockedSingleValue.take
  [ 8] Channel.take
  [ 9] GameOfLife$$Lambda$62.0x0000000801037840.test
  [10] ChannelsGrid.lambda$forEachChannel$1
  [11] ChannelsGrid$$Lambda$66.0x0000000801033208.accept
  [12] Dimensions.forEachRowCol
  [13] ChannelsGrid.forEachChannel
  [14] GameOfLife.calculateFrame
  [15] GameOfLife.lambda$calculateFrameBlocking$4
  [16] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [17] ThreadPoolExecutor.runWorker
  [18] ThreadPoolExecutor$Worker.run
  [19] Thread.run
  [20] [Thread-9 tid=161119]

--- 5249899434 ns (1.19%), 524 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LockedSingleValue.take
  [ 5] Channel.take
  [ 6] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 7] ReferencePipeline$3$1.accept
  [ 8] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 9] AbstractPipeline.copyInto
  [10] AbstractPipeline.wrapAndCopyInto
  [11] ReduceOps$ReduceOp.evaluateSequential
  [12] AbstractPipeline.evaluate
  [13] IntPipeline.reduce
  [14] IntPipeline.sum
  [15] Cell.calculateNextState
  [16] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [17] Iterable.forEach
  [18] CellsGroup.run
  [19] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-3 tid=161113]

--- 5190927119 ns (1.18%), 518 samples
  [ 0] Cell.lambda$notifyLiveness$0
  [ 1] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 2] ArrayList.forEach
  [ 3] Cell.notifyLiveness
  [ 4] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-2 tid=161112]

--- 5160136221 ns (1.17%), 515 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LockedSingleValue.put
  [ 5] Channel.put
  [ 6] Cell.lambda$notifyLiveness$0
  [ 7] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 8] ArrayList.forEach
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-3 tid=161113]

--- 4824250278 ns (1.09%), 481 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LockedSingleValue.put
  [ 5] Channel.put
  [ 6] Cell.lambda$notifyLiveness$0
  [ 7] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 8] ArrayList.forEach
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-8 tid=161118]

--- 4575658741 ns (1.04%), 451 samples
  [ 0] TickPerCell.lambda$tick$0
  [ 1] TickPerCell$$Lambda$50.0x0000000801035ec0.accept
  [ 2] ChannelsGrid.lambda$forEachChannel$0
  [ 3] ChannelsGrid$$Lambda$51.0x00000008010360d8.accept
  [ 4] Dimensions.forEachRowCol
  [ 5] ChannelsGrid.forEachChannel
  [ 6] TickPerCell.tick
  [ 7] GameOfLife.calculateFrame
  [ 8] GameOfLife.lambda$calculateFrameBlocking$4
  [ 9] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-9 tid=161119]

--- 4537202090 ns (1.03%), 447 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LockedSingleValue.take
  [ 3] Channel.take
  [ 4] GameOfLife$$Lambda$62.0x0000000801037840.test
  [ 5] ChannelsGrid.lambda$forEachChannel$1
  [ 6] ChannelsGrid$$Lambda$66.0x0000000801033208.accept
  [ 7] Dimensions.forEachRowCol
  [ 8] ChannelsGrid.forEachChannel
  [ 9] GameOfLife.calculateFrame
  [10] GameOfLife.lambda$calculateFrameBlocking$4
  [11] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-9 tid=161119]

--- 4522939018 ns (1.03%), 451 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LockedSingleValue.take
  [ 5] Channel.take
  [ 6] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 7] ReferencePipeline$3$1.accept
  [ 8] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 9] AbstractPipeline.copyInto
  [10] AbstractPipeline.wrapAndCopyInto
  [11] ReduceOps$ReduceOp.evaluateSequential
  [12] AbstractPipeline.evaluate
  [13] IntPipeline.reduce
  [14] IntPipeline.sum
  [15] Cell.calculateNextState
  [16] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [17] Iterable.forEach
  [18] CellsGroup.run
  [19] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-8 tid=161118]

--- 4298821934 ns (0.98%), 429 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LockedSingleValue.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-7 tid=161117]

--- 4288725575 ns (0.97%), 428 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LockedSingleValue.put
  [ 3] Channel.put
  [ 4] Cell.lambda$notifyLiveness$0
  [ 5] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 6] ArrayList.forEach
  [ 7] Cell.notifyLiveness
  [ 8] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-6 tid=161116]

--- 4278634372 ns (0.97%), 427 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LockedSingleValue.take
  [ 5] Channel.take
  [ 6] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 7] ReferencePipeline$3$1.accept
  [ 8] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 9] AbstractPipeline.copyInto
  [10] AbstractPipeline.wrapAndCopyInto
  [11] ReduceOps$ReduceOp.evaluateSequential
  [12] AbstractPipeline.evaluate
  [13] IntPipeline.reduce
  [14] IntPipeline.sum
  [15] Cell.calculateNextState
  [16] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [17] Iterable.forEach
  [18] CellsGroup.run
  [19] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-2 tid=161112]

--- 4218499856 ns (0.96%), 421 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LockedSingleValue.put
  [ 3] Channel.put
  [ 4] Cell.lambda$notifyLiveness$0
  [ 5] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 6] ArrayList.forEach
  [ 7] Cell.notifyLiveness
  [ 8] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-5 tid=161115]

--- 4218109185 ns (0.96%), 421 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LockedSingleValue.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-6 tid=161116]

--- 4208215532 ns (0.95%), 420 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LockedSingleValue.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-4 tid=161114]

--- 4080904417 ns (0.93%), 402 samples
  [ 0] _raw_spin_unlock_irqrestore_[k]
  [ 1] try_to_wake_up_[k]
  [ 2] wake_up_q_[k]
  [ 3] futex_wake_[k]
  [ 4] do_futex_[k]
  [ 5] __x64_sys_futex_[k]
  [ 6] do_syscall_64_[k]
  [ 7] entry_SYSCALL_64_after_hwframe_[k]
  [ 8] ___pthread_cond_signal
  [ 9] Unsafe.unpark
  [10] LockSupport.unpark
  [11] AbstractQueuedSynchronizer.signalNext
  [12] AbstractQueuedSynchronizer.release
  [13] ReentrantLock.unlock
  [14] LockedSingleValue.put
  [15] Channel.put
  [16] TickPerCell.lambda$tick$0
  [17] TickPerCell$$Lambda$50.0x0000000801035ec0.accept
  [18] ChannelsGrid.lambda$forEachChannel$0
  [19] ChannelsGrid$$Lambda$51.0x00000008010360d8.accept
  [20] Dimensions.forEachRowCol
  [21] ChannelsGrid.forEachChannel
  [22] TickPerCell.tick
  [23] GameOfLife.calculateFrame
  [24] GameOfLife.lambda$calculateFrameBlocking$4
  [25] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [26] ThreadPoolExecutor.runWorker
  [27] ThreadPoolExecutor$Worker.run
  [28] Thread.run
  [29] [Thread-9 tid=161119]

--- 4018447203 ns (0.91%), 401 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LockedSingleValue.put
  [ 3] Channel.put
  [ 4] Cell.lambda$notifyLiveness$0
  [ 5] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 6] ArrayList.forEach
  [ 7] Cell.notifyLiveness
  [ 8] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-7 tid=161117]

--- 4008112107 ns (0.91%), 400 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LockedSingleValue.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-5 tid=161115]

--- 3988180022 ns (0.90%), 398 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LockedSingleValue.put
  [ 3] Channel.put
  [ 4] Cell.lambda$notifyLiveness$0
  [ 5] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 6] ArrayList.forEach
  [ 7] Cell.notifyLiveness
  [ 8] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-4 tid=161114]

--- 3957567803 ns (0.90%), 395 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LockedSingleValue.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-3 tid=161113]

--- 3948248587 ns (0.90%), 394 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LockedSingleValue.put
  [ 5] Channel.put
  [ 6] Cell.lambda$notifyLiveness$0
  [ 7] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 8] ArrayList.forEach
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-2 tid=161112]

--- 3596929737 ns (0.82%), 359 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LockedSingleValue.put
  [ 3] Channel.put
  [ 4] Cell.lambda$notifyLiveness$0
  [ 5] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 6] ArrayList.forEach
  [ 7] Cell.notifyLiveness
  [ 8] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-3 tid=161113]

--- 3370016882 ns (0.76%), 336 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LockedSingleValue.put
  [ 3] Channel.put
  [ 4] Cell.lambda$notifyLiveness$0
  [ 5] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 6] ArrayList.forEach
  [ 7] Cell.notifyLiveness
  [ 8] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-8 tid=161118]

--- 3249375526 ns (0.74%), 324 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LockedSingleValue.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-8 tid=161118]

--- 3246881181 ns (0.74%), 320 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LockedSingleValue.put
  [ 3] Channel.put
  [ 4] TickPerCell.lambda$tick$0
  [ 5] TickPerCell$$Lambda$50.0x0000000801035ec0.accept
  [ 6] ChannelsGrid.lambda$forEachChannel$0
  [ 7] ChannelsGrid$$Lambda$51.0x00000008010360d8.accept
  [ 8] Dimensions.forEachRowCol
  [ 9] ChannelsGrid.forEachChannel
  [10] TickPerCell.tick
  [11] GameOfLife.calculateFrame
  [12] GameOfLife.lambda$calculateFrameBlocking$4
  [13] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-9 tid=161119]

--- 3186747953 ns (0.72%), 318 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LockedSingleValue.put
  [ 3] Channel.put
  [ 4] Cell.lambda$notifyLiveness$0
  [ 5] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 6] ArrayList.forEach
  [ 7] Cell.notifyLiveness
  [ 8] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-2 tid=161112]

--- 3086152813 ns (0.70%), 308 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LockedSingleValue.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-2 tid=161112]

--- 3003303595 ns (0.68%), 296 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LockedSingleValue.put
  [ 5] Channel.put
  [ 6] TickPerCell.lambda$tick$0
  [ 7] TickPerCell$$Lambda$50.0x0000000801035ec0.accept
  [ 8] ChannelsGrid.lambda$forEachChannel$0
  [ 9] ChannelsGrid$$Lambda$51.0x00000008010360d8.accept
  [10] Dimensions.forEachRowCol
  [11] ChannelsGrid.forEachChannel
  [12] TickPerCell.tick
  [13] GameOfLife.calculateFrame
  [14] GameOfLife.lambda$calculateFrameBlocking$4
  [15] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [16] ThreadPoolExecutor.runWorker
  [17] ThreadPoolExecutor$Worker.run
  [18] Thread.run
  [19] [Thread-9 tid=161119]

--- 2375288247 ns (0.54%), 234 samples
  [ 0] __lll_lock_wake
  [ 1] Unsafe_Park
  [ 2] Unsafe.park
  [ 3] LockSupport.park
  [ 4] AbstractQueuedSynchronizer$ConditionNode.block
  [ 5] ForkJoinPool.unmanagedBlock
  [ 6] ForkJoinPool.managedBlock
  [ 7] AbstractQueuedSynchronizer$ConditionObject.await
  [ 8] LockedSingleValue.take
  [ 9] Channel.take
  [10] GameOfLife$$Lambda$62.0x0000000801037840.test
  [11] ChannelsGrid.lambda$forEachChannel$1
  [12] ChannelsGrid$$Lambda$66.0x0000000801033208.accept
  [13] Dimensions.forEachRowCol
  [14] ChannelsGrid.forEachChannel
  [15] GameOfLife.calculateFrame
  [16] GameOfLife.lambda$calculateFrameBlocking$4
  [17] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-9 tid=161119]

--- 2254664503 ns (0.51%), 225 samples
  [ 0] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 1] ReferencePipeline$3$1.accept
  [ 2] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 3] AbstractPipeline.copyInto
  [ 4] AbstractPipeline.wrapAndCopyInto
  [ 5] ReduceOps$ReduceOp.evaluateSequential
  [ 6] AbstractPipeline.evaluate
  [ 7] IntPipeline.reduce
  [ 8] IntPipeline.sum
  [ 9] Cell.calculateNextState
  [10] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-6 tid=161116]

--- 2234492406 ns (0.51%), 223 samples
  [ 0] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 1] ReferencePipeline$3$1.accept
  [ 2] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 3] AbstractPipeline.copyInto
  [ 4] AbstractPipeline.wrapAndCopyInto
  [ 5] ReduceOps$ReduceOp.evaluateSequential
  [ 6] AbstractPipeline.evaluate
  [ 7] IntPipeline.reduce
  [ 8] IntPipeline.sum
  [ 9] Cell.calculateNextState
  [10] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-3 tid=161113]

--- 2214695741 ns (0.50%), 221 samples
  [ 0] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 1] ReferencePipeline$3$1.accept
  [ 2] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 3] AbstractPipeline.copyInto
  [ 4] AbstractPipeline.wrapAndCopyInto
  [ 5] ReduceOps$ReduceOp.evaluateSequential
  [ 6] AbstractPipeline.evaluate
  [ 7] IntPipeline.reduce
  [ 8] IntPipeline.sum
  [ 9] Cell.calculateNextState
  [10] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-5 tid=161115]

--- 2111761562 ns (0.48%), 208 samples
  [ 0] Channel.take
  [ 1] GameOfLife$$Lambda$62.0x0000000801037840.test
  [ 2] ChannelsGrid.lambda$forEachChannel$1
  [ 3] ChannelsGrid$$Lambda$66.0x0000000801033208.accept
  [ 4] Dimensions.forEachRowCol
  [ 5] ChannelsGrid.forEachChannel
  [ 6] GameOfLife.calculateFrame
  [ 7] GameOfLife.lambda$calculateFrameBlocking$4
  [ 8] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [ 9] ThreadPoolExecutor.runWorker
  [10] ThreadPoolExecutor$Worker.run
  [11] Thread.run
  [12] [Thread-9 tid=161119]

--- 2094170697 ns (0.48%), 209 samples
  [ 0] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 1] ReferencePipeline$3$1.accept
  [ 2] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 3] AbstractPipeline.copyInto
  [ 4] AbstractPipeline.wrapAndCopyInto
  [ 5] ReduceOps$ReduceOp.evaluateSequential
  [ 6] AbstractPipeline.evaluate
  [ 7] IntPipeline.reduce
  [ 8] IntPipeline.sum
  [ 9] Cell.calculateNextState
  [10] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-4 tid=161114]

--- 1775793347 ns (0.40%), 175 samples
  [ 0] Dimensions.forEachRowCol
  [ 1] ChannelsGrid.forEachChannel
  [ 2] TickPerCell.tick
  [ 3] GameOfLife.calculateFrame
  [ 4] GameOfLife.lambda$calculateFrameBlocking$4
  [ 5] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [ 6] ThreadPoolExecutor.runWorker
  [ 7] ThreadPoolExecutor$Worker.run
  [ 8] Thread.run
  [ 9] [Thread-9 tid=161119]

--- 1775251944 ns (0.40%), 177 samples
  [ 0] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 1] ReferencePipeline$3$1.accept
  [ 2] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 3] AbstractPipeline.copyInto
  [ 4] AbstractPipeline.wrapAndCopyInto
  [ 5] ReduceOps$ReduceOp.evaluateSequential
  [ 6] AbstractPipeline.evaluate
  [ 7] IntPipeline.reduce
  [ 8] IntPipeline.sum
  [ 9] Cell.calculateNextState
  [10] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-8 tid=161118]

--- 1633455894 ns (0.37%), 163 samples
  [ 0] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 1] ReferencePipeline$3$1.accept
  [ 2] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 3] AbstractPipeline.copyInto
  [ 4] AbstractPipeline.wrapAndCopyInto
  [ 5] ReduceOps$ReduceOp.evaluateSequential
  [ 6] AbstractPipeline.evaluate
  [ 7] IntPipeline.reduce
  [ 8] IntPipeline.sum
  [ 9] Cell.calculateNextState
  [10] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-7 tid=161117]

--- 1543150280 ns (0.35%), 154 samples
  [ 0] ___pthread_cond_signal
  [ 1] Unsafe.unpark
  [ 2] LockSupport.unpark
  [ 3] AbstractQueuedSynchronizer.signalNext
  [ 4] AbstractQueuedSynchronizer.release
  [ 5] ReentrantLock.unlock
  [ 6] LockedSingleValue.put
  [ 7] Channel.put
  [ 8] Cell.calculateNextState
  [ 9] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-2 tid=161112]

--- 1513106694 ns (0.34%), 151 samples
  [ 0] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 1] ReferencePipeline$3$1.accept
  [ 2] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 3] AbstractPipeline.copyInto
  [ 4] AbstractPipeline.wrapAndCopyInto
  [ 5] ReduceOps$ReduceOp.evaluateSequential
  [ 6] AbstractPipeline.evaluate
  [ 7] IntPipeline.reduce
  [ 8] IntPipeline.sum
  [ 9] Cell.calculateNextState
  [10] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-2 tid=161112]

--- 1422983718 ns (0.32%), 142 samples
  [ 0] LockedSingleValue.take
  [ 1] Channel.take
  [ 2] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 3] ReferencePipeline$3$1.accept
  [ 4] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 5] AbstractPipeline.copyInto
  [ 6] AbstractPipeline.wrapAndCopyInto
  [ 7] ReduceOps$ReduceOp.evaluateSequential
  [ 8] AbstractPipeline.evaluate
  [ 9] IntPipeline.reduce
  [10] IntPipeline.sum
  [11] Cell.calculateNextState
  [12] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [13] Iterable.forEach
  [14] CellsGroup.run
  [15] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [16] ThreadPoolExecutor.runWorker
  [17] ThreadPoolExecutor$Worker.run
  [18] Thread.run
  [19] [Thread-5 tid=161115]

--- 1372663412 ns (0.31%), 137 samples
  [ 0] LockedSingleValue.take
  [ 1] Channel.take
  [ 2] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 3] ReferencePipeline$3$1.accept
  [ 4] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 5] AbstractPipeline.copyInto
  [ 6] AbstractPipeline.wrapAndCopyInto
  [ 7] ReduceOps$ReduceOp.evaluateSequential
  [ 8] AbstractPipeline.evaluate
  [ 9] IntPipeline.reduce
  [10] IntPipeline.sum
  [11] Cell.calculateNextState
  [12] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [13] Iterable.forEach
  [14] CellsGroup.run
  [15] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [16] ThreadPoolExecutor.runWorker
  [17] ThreadPoolExecutor$Worker.run
  [18] Thread.run
  [19] [Thread-4 tid=161114]

--- 1342645784 ns (0.30%), 134 samples
  [ 0] AbstractPipeline.<init>
  [ 1] ReferencePipeline.<init>
  [ 2] ReferencePipeline$Head.<init>
  [ 3] StreamSupport.stream
  [ 4] Collection.stream
  [ 5] Cell.calculateNextState
  [ 6] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-4 tid=161114]

--- 1302744047 ns (0.30%), 130 samples
  [ 0] Channel.take
  [ 1] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 2] ReferencePipeline$3$1.accept
  [ 3] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 4] AbstractPipeline.copyInto
  [ 5] AbstractPipeline.wrapAndCopyInto
  [ 6] ReduceOps$ReduceOp.evaluateSequential
  [ 7] AbstractPipeline.evaluate
  [ 8] IntPipeline.reduce
  [ 9] IntPipeline.sum
  [10] Cell.calculateNextState
  [11] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-5 tid=161115]

--- 1272460467 ns (0.29%), 127 samples
  [ 0] LockedSingleValue.take
  [ 1] Channel.take
  [ 2] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 3] ReferencePipeline$3$1.accept
  [ 4] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 5] AbstractPipeline.copyInto
  [ 6] AbstractPipeline.wrapAndCopyInto
  [ 7] ReduceOps$ReduceOp.evaluateSequential
  [ 8] AbstractPipeline.evaluate
  [ 9] IntPipeline.reduce
  [10] IntPipeline.sum
  [11] Cell.calculateNextState
  [12] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [13] Iterable.forEach
  [14] CellsGroup.run
  [15] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [16] ThreadPoolExecutor.runWorker
  [17] ThreadPoolExecutor$Worker.run
  [18] Thread.run
  [19] [Thread-6 tid=161116]

--- 1269366576 ns (0.29%), 125 samples
  [ 0] syscall_enter_from_user_mode_[k]
  [ 1] do_syscall_64_[k]
  [ 2] entry_SYSCALL_64_after_hwframe_[k]
  [ 3] __lll_lock_wake
  [ 4] Unsafe_Park
  [ 5] Unsafe.park
  [ 6] LockSupport.park
  [ 7] AbstractQueuedSynchronizer$ConditionNode.block
  [ 8] ForkJoinPool.unmanagedBlock
  [ 9] ForkJoinPool.managedBlock
  [10] AbstractQueuedSynchronizer$ConditionObject.await
  [11] LockedSingleValue.take
  [12] Channel.take
  [13] GameOfLife$$Lambda$62.0x0000000801037840.test
  [14] ChannelsGrid.lambda$forEachChannel$1
  [15] ChannelsGrid$$Lambda$66.0x0000000801033208.accept
  [16] Dimensions.forEachRowCol
  [17] ChannelsGrid.forEachChannel
  [18] GameOfLife.calculateFrame
  [19] GameOfLife.lambda$calculateFrameBlocking$4
  [20] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [21] ThreadPoolExecutor.runWorker
  [22] ThreadPoolExecutor$Worker.run
  [23] Thread.run
  [24] [Thread-9 tid=161119]

--- 1252368461 ns (0.28%), 125 samples
  [ 0] Channel.take
  [ 1] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 2] ReferencePipeline$3$1.accept
  [ 3] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 4] AbstractPipeline.copyInto
  [ 5] AbstractPipeline.wrapAndCopyInto
  [ 6] ReduceOps$ReduceOp.evaluateSequential
  [ 7] AbstractPipeline.evaluate
  [ 8] IntPipeline.reduce
  [ 9] IntPipeline.sum
  [10] Cell.calculateNextState
  [11] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-3 tid=161113]

--- 1207561644 ns (0.27%), 119 samples
  [ 0] ___pthread_cond_signal
  [ 1] Unsafe.unpark
  [ 2] LockSupport.unpark
  [ 3] AbstractQueuedSynchronizer.signalNext
  [ 4] AbstractQueuedSynchronizer.release
  [ 5] ReentrantLock.unlock
  [ 6] LockedSingleValue.put
  [ 7] Channel.put
  [ 8] TickPerCell.lambda$tick$0
  [ 9] TickPerCell$$Lambda$50.0x0000000801035ec0.accept
  [10] ChannelsGrid.lambda$forEachChannel$0
  [11] ChannelsGrid$$Lambda$51.0x00000008010360d8.accept
  [12] Dimensions.forEachRowCol
  [13] ChannelsGrid.forEachChannel
  [14] TickPerCell.tick
  [15] GameOfLife.calculateFrame
  [16] GameOfLife.lambda$calculateFrameBlocking$4
  [17] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-9 tid=161119]

--- 1202392776 ns (0.27%), 120 samples
  [ 0] AbstractPipeline.<init>
  [ 1] ReferencePipeline.<init>
  [ 2] ReferencePipeline$Head.<init>
  [ 3] StreamSupport.stream
  [ 4] Collection.stream
  [ 5] Cell.calculateNextState
  [ 6] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-3 tid=161113]

--- 1182427954 ns (0.27%), 118 samples
  [ 0] Channel.take
  [ 1] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 2] ReferencePipeline$3$1.accept
  [ 3] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 4] AbstractPipeline.copyInto
  [ 5] AbstractPipeline.wrapAndCopyInto
  [ 6] ReduceOps$ReduceOp.evaluateSequential
  [ 7] AbstractPipeline.evaluate
  [ 8] IntPipeline.reduce
  [ 9] IntPipeline.sum
  [10] Cell.calculateNextState
  [11] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-7 tid=161117]

--- 1182405657 ns (0.27%), 118 samples
  [ 0] LockedSingleValue.take
  [ 1] Channel.take
  [ 2] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 3] ReferencePipeline$3$1.accept
  [ 4] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 5] AbstractPipeline.copyInto
  [ 6] AbstractPipeline.wrapAndCopyInto
  [ 7] ReduceOps$ReduceOp.evaluateSequential
  [ 8] AbstractPipeline.evaluate
  [ 9] IntPipeline.reduce
  [10] IntPipeline.sum
  [11] Cell.calculateNextState
  [12] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [13] Iterable.forEach
  [14] CellsGroup.run
  [15] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [16] ThreadPoolExecutor.runWorker
  [17] ThreadPoolExecutor$Worker.run
  [18] Thread.run
  [19] [Thread-2 tid=161112]

--- 1172334200 ns (0.27%), 117 samples
  [ 0] AbstractPipeline.<init>
  [ 1] ReferencePipeline.<init>
  [ 2] ReferencePipeline$Head.<init>
  [ 3] StreamSupport.stream
  [ 4] Collection.stream
  [ 5] Cell.calculateNextState
  [ 6] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-2 tid=161112]

--- 1122105149 ns (0.25%), 112 samples
  [ 0] LockedSingleValue.take
  [ 1] Channel.take
  [ 2] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 3] ReferencePipeline$3$1.accept
  [ 4] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 5] AbstractPipeline.copyInto
  [ 6] AbstractPipeline.wrapAndCopyInto
  [ 7] ReduceOps$ReduceOp.evaluateSequential
  [ 8] AbstractPipeline.evaluate
  [ 9] IntPipeline.reduce
  [10] IntPipeline.sum
  [11] Cell.calculateNextState
  [12] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [13] Iterable.forEach
  [14] CellsGroup.run
  [15] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [16] ThreadPoolExecutor.runWorker
  [17] ThreadPoolExecutor$Worker.run
  [18] Thread.run
  [19] [Thread-3 tid=161113]

--- 1082251573 ns (0.25%), 108 samples
  [ 0] LockedSingleValue.take
  [ 1] Channel.take
  [ 2] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 3] ReferencePipeline$3$1.accept
  [ 4] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 5] AbstractPipeline.copyInto
  [ 6] AbstractPipeline.wrapAndCopyInto
  [ 7] ReduceOps$ReduceOp.evaluateSequential
  [ 8] AbstractPipeline.evaluate
  [ 9] IntPipeline.reduce
  [10] IntPipeline.sum
  [11] Cell.calculateNextState
  [12] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [13] Iterable.forEach
  [14] CellsGroup.run
  [15] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [16] ThreadPoolExecutor.runWorker
  [17] ThreadPoolExecutor$Worker.run
  [18] Thread.run
  [19] [Thread-7 tid=161117]

--- 1072166450 ns (0.24%), 107 samples
  [ 0] Channel.take
  [ 1] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 2] ReferencePipeline$3$1.accept
  [ 3] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 4] AbstractPipeline.copyInto
  [ 5] AbstractPipeline.wrapAndCopyInto
  [ 6] ReduceOps$ReduceOp.evaluateSequential
  [ 7] AbstractPipeline.evaluate
  [ 8] IntPipeline.reduce
  [ 9] IntPipeline.sum
  [10] Cell.calculateNextState
  [11] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-2 tid=161112]

--- 1052108087 ns (0.24%), 105 samples
  [ 0] AbstractPipeline.<init>
  [ 1] ReferencePipeline.<init>
  [ 2] ReferencePipeline$StatelessOp.<init>
  [ 3] ReferencePipeline$3.<init>
  [ 4] ReferencePipeline.map
  [ 5] Cell.calculateNextState
  [ 6] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-2 tid=161112]

--- 1033070076 ns (0.23%), 103 samples
  [ 0] LockedSingleValue.take
  [ 1] Channel.take
  [ 2] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 3] ReferencePipeline$3$1.accept
  [ 4] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 5] AbstractPipeline.copyInto
  [ 6] AbstractPipeline.wrapAndCopyInto
  [ 7] ReduceOps$ReduceOp.evaluateSequential
  [ 8] AbstractPipeline.evaluate
  [ 9] IntPipeline.reduce
  [10] IntPipeline.sum
  [11] Cell.calculateNextState
  [12] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [13] Iterable.forEach
  [14] CellsGroup.run
  [15] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [16] ThreadPoolExecutor.runWorker
  [17] ThreadPoolExecutor$Worker.run
  [18] Thread.run
  [19] [Thread-8 tid=161118]

--- 1022001179 ns (0.23%), 102 samples
  [ 0] Channel.take
  [ 1] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 2] ReferencePipeline$3$1.accept
  [ 3] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 4] AbstractPipeline.copyInto
  [ 5] AbstractPipeline.wrapAndCopyInto
  [ 6] ReduceOps$ReduceOp.evaluateSequential
  [ 7] AbstractPipeline.evaluate
  [ 8] IntPipeline.reduce
  [ 9] IntPipeline.sum
  [10] Cell.calculateNextState
  [11] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-4 tid=161114]

--- 1021992123 ns (0.23%), 102 samples
  [ 0] Channel.take
  [ 1] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 2] ReferencePipeline$3$1.accept
  [ 3] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 4] AbstractPipeline.copyInto
  [ 5] AbstractPipeline.wrapAndCopyInto
  [ 6] ReduceOps$ReduceOp.evaluateSequential
  [ 7] AbstractPipeline.evaluate
  [ 8] IntPipeline.reduce
  [ 9] IntPipeline.sum
  [10] Cell.calculateNextState
  [11] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-6 tid=161116]

--- 1002069674 ns (0.23%), 100 samples
  [ 0] AbstractPipeline.<init>
  [ 1] ReferencePipeline.<init>
  [ 2] ReferencePipeline$Head.<init>
  [ 3] StreamSupport.stream
  [ 4] Collection.stream
  [ 5] Cell.calculateNextState
  [ 6] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-5 tid=161115]

--- 971833893 ns (0.22%), 97 samples
  [ 0] AbstractPipeline.<init>
  [ 1] ReferencePipeline.<init>
  [ 2] ReferencePipeline$Head.<init>
  [ 3] StreamSupport.stream
  [ 4] Collection.stream
  [ 5] Cell.calculateNextState
  [ 6] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-6 tid=161116]

--- 951842413 ns (0.22%), 95 samples
  [ 0] AbstractPipeline.<init>
  [ 1] ReferencePipeline.<init>
  [ 2] ReferencePipeline$StatelessOp.<init>
  [ 3] ReferencePipeline$3.<init>
  [ 4] ReferencePipeline.map
  [ 5] Cell.calculateNextState
  [ 6] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-7 tid=161117]

--- 933867560 ns (0.21%), 92 samples
  [ 0] LockedSingleValue.take
  [ 1] Channel.take
  [ 2] GameOfLife$$Lambda$62.0x0000000801037840.test
  [ 3] ChannelsGrid.lambda$forEachChannel$1
  [ 4] ChannelsGrid$$Lambda$66.0x0000000801033208.accept
  [ 5] Dimensions.forEachRowCol
  [ 6] ChannelsGrid.forEachChannel
  [ 7] GameOfLife.calculateFrame
  [ 8] GameOfLife.lambda$calculateFrameBlocking$4
  [ 9] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-9 tid=161119]

--- 881755376 ns (0.20%), 86 samples
  [ 0] __futex_abstimed_wait_common
  [ 1] Unsafe.park
  [ 2] LockSupport.park
  [ 3] AbstractQueuedSynchronizer$ConditionNode.block
  [ 4] ForkJoinPool.unmanagedBlock
  [ 5] ForkJoinPool.managedBlock
  [ 6] AbstractQueuedSynchronizer$ConditionObject.await
  [ 7] LockedSingleValue.take
  [ 8] Channel.take
  [ 9] GameOfLife.calculateFrameBlocking
  [10] GameOfLifeBenchmark.benchmark
  [11] GameOfLifeBenchmark_benchmark_jmhTest.benchmark_thrpt_jmhStub
  [12] GameOfLifeBenchmark_benchmark_jmhTest.benchmark_Throughput
  [13] DirectMethodHandle$Holder.invokeSpecial
  [14] LambdaForm$MH.0x000000080102e000.invoke
  [15] LambdaForm$MH.0x000000080102e400.invokeExact_MT
  [16] DirectMethodHandleAccessor.invokeImpl
  [17] DirectMethodHandleAccessor.invoke
  [18] Method.invoke
  [19] BenchmarkHandler$BenchmarkTask.call
  [20] BenchmarkHandler$BenchmarkTask.call
  [21] FutureTask.run
  [22] Executors$RunnableAdapter.call
  [23] FutureTask.run
  [24] ThreadPoolExecutor.runWorker
  [25] ThreadPoolExecutor$Worker.run
  [26] Thread.run
  [27] [gameoflife.benchmark.GameOfLifeBenchmark.benchmark-jmh-worker-1 tid=161111]

--- 872541939 ns (0.20%), 87 samples
  [ 0] Channel.take
  [ 1] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 2] ReferencePipeline$3$1.accept
  [ 3] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 4] AbstractPipeline.copyInto
  [ 5] AbstractPipeline.wrapAndCopyInto
  [ 6] ReduceOps$ReduceOp.evaluateSequential
  [ 7] AbstractPipeline.evaluate
  [ 8] IntPipeline.reduce
  [ 9] IntPipeline.sum
  [10] Cell.calculateNextState
  [11] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-8 tid=161118]

--- 871759419 ns (0.20%), 87 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LockedSingleValue.take
  [ 5] Channel.take
  [ 6] TickPerCell.waitTick
  [ 7] Cell.notifyLiveness
  [ 8] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-4 tid=161114]

--- 841737404 ns (0.19%), 84 samples
  [ 0] AbstractPipeline.<init>
  [ 1] ReferencePipeline.<init>
  [ 2] ReferencePipeline$StatelessOp.<init>
  [ 3] ReferencePipeline$3.<init>
  [ 4] ReferencePipeline.map
  [ 5] Cell.calculateNextState
  [ 6] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-4 tid=161114]

--- 831614285 ns (0.19%), 83 samples
  [ 0] AbstractPipeline.<init>
  [ 1] ReferencePipeline.<init>
  [ 2] ReferencePipeline$StatelessOp.<init>
  [ 3] ReferencePipeline$3.<init>
  [ 4] ReferencePipeline.map
  [ 5] Cell.calculateNextState
  [ 6] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-6 tid=161116]

--- 822351381 ns (0.19%), 82 samples
  [ 0] AbstractPipeline.<init>
  [ 1] ReferencePipeline.<init>
  [ 2] ReferencePipeline$Head.<init>
  [ 3] StreamSupport.stream
  [ 4] Collection.stream
  [ 5] Cell.calculateNextState
  [ 6] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-8 tid=161118]

--- 821672332 ns (0.19%), 82 samples
  [ 0] AbstractPipeline.<init>
  [ 1] ReferencePipeline.<init>
  [ 2] ReferencePipeline$Head.<init>
  [ 3] StreamSupport.stream
  [ 4] Collection.stream
  [ 5] Cell.calculateNextState
  [ 6] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-7 tid=161117]

--- 821540481 ns (0.19%), 82 samples
  [ 0] AbstractPipeline.<init>
  [ 1] ReferencePipeline.<init>
  [ 2] ReferencePipeline$StatelessOp.<init>
  [ 3] ReferencePipeline$3.<init>
  [ 4] ReferencePipeline.map
  [ 5] Cell.calculateNextState
  [ 6] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-3 tid=161113]

--- 812264854 ns (0.18%), 81 samples
  [ 0] AbstractPipeline.<init>
  [ 1] ReferencePipeline.<init>
  [ 2] ReferencePipeline$StatelessOp.<init>
  [ 3] ReferencePipeline$3.<init>
  [ 4] ReferencePipeline.map
  [ 5] Cell.calculateNextState
  [ 6] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-8 tid=161118]

--- 811667883 ns (0.18%), 81 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LockedSingleValue.take
  [ 5] Channel.take
  [ 6] TickPerCell.waitTick
  [ 7] Cell.notifyLiveness
  [ 8] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-3 tid=161113]

--- 802395487 ns (0.18%), 79 samples
  [ 0] syscall_enter_from_user_mode_[k]
  [ 1] do_syscall_64_[k]
  [ 2] entry_SYSCALL_64_after_hwframe_[k]
  [ 3] __futex_abstimed_wait_common
  [ 4] Unsafe.park
  [ 5] LockSupport.park
  [ 6] AbstractQueuedSynchronizer$ConditionNode.block
  [ 7] ForkJoinPool.unmanagedBlock
  [ 8] ForkJoinPool.managedBlock
  [ 9] AbstractQueuedSynchronizer$ConditionObject.await
  [10] LockedSingleValue.take
  [11] Channel.take
  [12] GameOfLife$$Lambda$62.0x0000000801037840.test
  [13] ChannelsGrid.lambda$forEachChannel$1
  [14] ChannelsGrid$$Lambda$66.0x0000000801033208.accept
  [15] Dimensions.forEachRowCol
  [16] ChannelsGrid.forEachChannel
  [17] GameOfLife.calculateFrame
  [18] GameOfLife.lambda$calculateFrameBlocking$4
  [19] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-9 tid=161119]

--- 781674816 ns (0.18%), 78 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LockedSingleValue.take
  [ 5] Channel.take
  [ 6] TickPerCell.waitTick
  [ 7] Cell.notifyLiveness
  [ 8] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-2 tid=161112]

--- 771676219 ns (0.18%), 77 samples
  [ 0] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 1] Iterable.forEach
  [ 2] CellsGroup.run
  [ 3] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 4] ThreadPoolExecutor.runWorker
  [ 5] ThreadPoolExecutor$Worker.run
  [ 6] Thread.run
  [ 7] [Thread-5 tid=161115]

--- 761893248 ns (0.17%), 76 samples
  [ 0] _raw_spin_unlock_irqrestore_[k]
  [ 1] try_to_wake_up_[k]
  [ 2] wake_up_q_[k]
  [ 3] futex_wake_[k]
  [ 4] do_futex_[k]
  [ 5] __x64_sys_futex_[k]
  [ 6] do_syscall_64_[k]
  [ 7] entry_SYSCALL_64_after_hwframe_[k]
  [ 8] ___pthread_cond_signal
  [ 9] Unsafe.unpark
  [10] LockSupport.unpark
  [11] AbstractQueuedSynchronizer.signalNext
  [12] AbstractQueuedSynchronizer.release
  [13] ReentrantLock.unlock
  [14] LockedSingleValue.put
  [15] Channel.put
  [16] Cell.calculateNextState
  [17] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [18] Iterable.forEach
  [19] CellsGroup.run
  [20] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [21] ThreadPoolExecutor.runWorker
  [22] ThreadPoolExecutor$Worker.run
  [23] Thread.run
  [24] [Thread-2 tid=161112]

--- 761855646 ns (0.17%), 75 samples
  [ 0] _raw_spin_unlock_irqrestore_[k]
  [ 1] try_to_wake_up_[k]
  [ 2] wake_up_q_[k]
  [ 3] futex_wake_[k]
  [ 4] do_futex_[k]
  [ 5] __x64_sys_futex_[k]
  [ 6] do_syscall_64_[k]
  [ 7] entry_SYSCALL_64_after_hwframe_[k]
  [ 8] ___pthread_cond_signal
  [ 9] Unsafe.unpark
  [10] LockSupport.unpark
  [11] AbstractQueuedSynchronizer.signalNext
  [12] AbstractQueuedSynchronizer.release
  [13] ReentrantLock.unlock
  [14] LockedSingleValue.put
  [15] Channel.put
  [16] GameOfLife.calculateFrame
  [17] GameOfLife.lambda$calculateFrameBlocking$4
  [18] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [19] ThreadPoolExecutor.runWorker
  [20] ThreadPoolExecutor$Worker.run
  [21] Thread.run
  [22] [Thread-9 tid=161119]

--- 761501306 ns (0.17%), 76 samples
  [ 0] AbstractPipeline.<init>
  [ 1] ReferencePipeline.<init>
  [ 2] ReferencePipeline$StatelessOp.<init>
  [ 3] ReferencePipeline$3.<init>
  [ 4] ReferencePipeline.map
  [ 5] Cell.calculateNextState
  [ 6] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-5 tid=161115]

--- 700599095 ns (0.16%), 69 samples
  [ 0] AbstractQueuedSynchronizer.signalNext
  [ 1] AbstractQueuedSynchronizer.release
  [ 2] ReentrantLock.unlock
  [ 3] LockedSingleValue.take
  [ 4] Channel.take
  [ 5] GameOfLife$$Lambda$62.0x0000000801037840.test
  [ 6] ChannelsGrid.lambda$forEachChannel$1
  [ 7] ChannelsGrid$$Lambda$66.0x0000000801033208.accept
  [ 8] Dimensions.forEachRowCol
  [ 9] ChannelsGrid.forEachChannel
  [10] GameOfLife.calculateFrame
  [11] GameOfLife.lambda$calculateFrameBlocking$4
  [12] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-9 tid=161119]

--- 696430773 ns (0.16%), 68 samples
  [ 0] _raw_spin_unlock_irqrestore_[k]
  [ 1] try_to_wake_up_[k]
  [ 2] wake_up_q_[k]
  [ 3] futex_wake_[k]
  [ 4] do_futex_[k]
  [ 5] __x64_sys_futex_[k]
  [ 6] do_syscall_64_[k]
  [ 7] entry_SYSCALL_64_after_hwframe_[k]
  [ 8] ___pthread_cond_signal
  [ 9] Unsafe.unpark
  [10] LockSupport.unpark
  [11] AbstractQueuedSynchronizer.signalNext
  [12] AbstractQueuedSynchronizer.release
  [13] ReentrantLock.unlock
  [14] LinkedBlockingQueue.signalNotEmpty
  [15] LinkedBlockingQueue.offer
  [16] ThreadPoolExecutor.execute
  [17] GameOfLife$$Lambda$43.0x0000000801034c28.accept
  [18] GameOfLife.calculateFrameBlocking
  [19] GameOfLifeBenchmark.benchmark
  [20] GameOfLifeBenchmark_benchmark_jmhTest.benchmark_thrpt_jmhStub
  [21] GameOfLifeBenchmark_benchmark_jmhTest.benchmark_Throughput
  [22] DirectMethodHandle$Holder.invokeSpecial
  [23] LambdaForm$MH.0x000000080102e000.invoke
  [24] LambdaForm$MH.0x000000080102e400.invokeExact_MT
  [25] DirectMethodHandleAccessor.invokeImpl
  [26] DirectMethodHandleAccessor.invoke
  [27] Method.invoke
  [28] BenchmarkHandler$BenchmarkTask.call
  [29] BenchmarkHandler$BenchmarkTask.call
  [30] FutureTask.run
  [31] Executors$RunnableAdapter.call
  [32] FutureTask.run
  [33] ThreadPoolExecutor.runWorker
  [34] ThreadPoolExecutor$Worker.run
  [35] Thread.run
  [36] [gameoflife.benchmark.GameOfLifeBenchmark.benchmark-jmh-worker-1 tid=161111]

--- 651353866 ns (0.15%), 65 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LockedSingleValue.take
  [ 5] Channel.take
  [ 6] TickPerCell.waitTick
  [ 7] Cell.notifyLiveness
  [ 8] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-6 tid=161116]

--- 651317773 ns (0.15%), 65 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LockedSingleValue.take
  [ 3] Channel.take
  [ 4] TickPerCell.waitTick
  [ 5] Cell.notifyLiveness
  [ 6] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-6 tid=161116]

--- 651274019 ns (0.15%), 65 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LockedSingleValue.take
  [ 5] Channel.take
  [ 6] TickPerCell.waitTick
  [ 7] Cell.notifyLiveness
  [ 8] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-5 tid=161115]

--- 651215750 ns (0.15%), 65 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LockedSingleValue.take
  [ 3] Channel.take
  [ 4] TickPerCell.waitTick
  [ 5] Cell.notifyLiveness
  [ 6] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-3 tid=161113]

--- 611768619 ns (0.14%), 61 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LockedSingleValue.take
  [ 5] Channel.take
  [ 6] TickPerCell.waitTick
  [ 7] Cell.notifyLiveness
  [ 8] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-8 tid=161118]

--- 611258182 ns (0.14%), 61 samples
  [ 0] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 1] Iterable.forEach
  [ 2] CellsGroup.run
  [ 3] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 4] ThreadPoolExecutor.runWorker
  [ 5] ThreadPoolExecutor$Worker.run
  [ 6] Thread.run
  [ 7] [Thread-6 tid=161116]

--- 601391953 ns (0.14%), 60 samples
  [ 0] syscall_enter_from_user_mode_[k]
  [ 1] do_syscall_64_[k]
  [ 2] entry_SYSCALL_64_after_hwframe_[k]
  [ 3] ___pthread_cond_signal
  [ 4] Unsafe.unpark
  [ 5] LockSupport.unpark
  [ 6] AbstractQueuedSynchronizer.signalNext
  [ 7] AbstractQueuedSynchronizer.release
  [ 8] ReentrantLock.unlock
  [ 9] LockedSingleValue.put
  [10] Channel.put
  [11] Cell.calculateNextState
  [12] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [13] Iterable.forEach
  [14] CellsGroup.run
  [15] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [16] ThreadPoolExecutor.runWorker
  [17] ThreadPoolExecutor$Worker.run
  [18] Thread.run
  [19] [Thread-2 tid=161112]

--- 601313413 ns (0.14%), 60 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LockedSingleValue.take
  [ 5] Channel.take
  [ 6] TickPerCell.waitTick
  [ 7] Cell.notifyLiveness
  [ 8] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-7 tid=161117]

--- 601203767 ns (0.14%), 60 samples
  [ 0] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 1] Iterable.forEach
  [ 2] CellsGroup.run
  [ 3] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 4] ThreadPoolExecutor.runWorker
  [ 5] ThreadPoolExecutor$Worker.run
  [ 6] Thread.run
  [ 7] [Thread-4 tid=161114]

--- 591163117 ns (0.13%), 59 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LockedSingleValue.take
  [ 3] Channel.take
  [ 4] TickPerCell.waitTick
  [ 5] Cell.notifyLiveness
  [ 6] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-4 tid=161114]

--- 571207372 ns (0.13%), 57 samples
  [ 0] __futex_abstimed_wait_common
  [ 1] Unsafe.park
  [ 2] LockSupport.park
  [ 3] AbstractQueuedSynchronizer$ConditionNode.block
  [ 4] ForkJoinPool.unmanagedBlock
  [ 5] ForkJoinPool.managedBlock
  [ 6] AbstractQueuedSynchronizer$ConditionObject.await
  [ 7] LockedSingleValue.take
  [ 8] Channel.take
  [ 9] TickPerCell.waitTick
  [10] Cell.notifyLiveness
  [11] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-5 tid=161115]

--- 558273557 ns (0.13%), 55 samples
  [ 0] __condvar_dec_grefs
  [ 1] Unsafe.park
  [ 2] LockSupport.park
  [ 3] AbstractQueuedSynchronizer$ConditionNode.block
  [ 4] ForkJoinPool.unmanagedBlock
  [ 5] ForkJoinPool.managedBlock
  [ 6] AbstractQueuedSynchronizer$ConditionObject.await
  [ 7] LockedSingleValue.take
  [ 8] Channel.take
  [ 9] GameOfLife$$Lambda$62.0x0000000801037840.test
  [10] ChannelsGrid.lambda$forEachChannel$1
  [11] ChannelsGrid$$Lambda$66.0x0000000801033208.accept
  [12] Dimensions.forEachRowCol
  [13] ChannelsGrid.forEachChannel
  [14] GameOfLife.calculateFrame
  [15] GameOfLife.lambda$calculateFrameBlocking$4
  [16] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [17] ThreadPoolExecutor.runWorker
  [18] ThreadPoolExecutor$Worker.run
  [19] Thread.run
  [20] [Thread-9 tid=161119]

--- 551611684 ns (0.13%), 55 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LockedSingleValue.take
  [ 3] Channel.take
  [ 4] TickPerCell.waitTick
  [ 5] Cell.notifyLiveness
  [ 6] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-8 tid=161118]

--- 531157244 ns (0.12%), 53 samples
  [ 0] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 1] Iterable.forEach
  [ 2] CellsGroup.run
  [ 3] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 4] ThreadPoolExecutor.runWorker
  [ 5] ThreadPoolExecutor$Worker.run
  [ 6] Thread.run
  [ 7] [Thread-7 tid=161117]

--- 531137221 ns (0.12%), 53 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LockedSingleValue.take
  [ 3] Channel.take
  [ 4] TickPerCell.waitTick
  [ 5] Cell.notifyLiveness
  [ 6] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-2 tid=161112]

--- 521035469 ns (0.12%), 52 samples
  [ 0] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 1] Iterable.forEach
  [ 2] CellsGroup.run
  [ 3] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 4] ThreadPoolExecutor.runWorker
  [ 5] ThreadPoolExecutor$Worker.run
  [ 6] Thread.run
  [ 7] [Thread-3 tid=161113]

--- 511089030 ns (0.12%), 51 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LockedSingleValue.take
  [ 3] Channel.take
  [ 4] TickPerCell.waitTick
  [ 5] Cell.notifyLiveness
  [ 6] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-7 tid=161117]

--- 497284327 ns (0.11%), 49 samples
  [ 0] ChannelsGrid.getChannel
  [ 1] ChannelsGrid.lambda$forEachChannel$1
  [ 2] ChannelsGrid$$Lambda$66.0x0000000801033208.accept
  [ 3] Dimensions.forEachRowCol
  [ 4] ChannelsGrid.forEachChannel
  [ 5] GameOfLife.calculateFrame
  [ 6] GameOfLife.lambda$calculateFrameBlocking$4
  [ 7] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-9 tid=161119]

--- 491441555 ns (0.11%), 49 samples
  [ 0] Channel.take
  [ 1] TickPerCell.waitTick
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-8 tid=161118]

--- 481014978 ns (0.11%), 48 samples
  [ 0] Channel.take
  [ 1] TickPerCell.waitTick
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-2 tid=161112]

--- 481014163 ns (0.11%), 48 samples
  [ 0] Channel.take
  [ 1] TickPerCell.waitTick
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-5 tid=161115]

--- 480998118 ns (0.11%), 48 samples
  [ 0] Channel.take
  [ 1] TickPerCell.waitTick
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-7 tid=161117]

--- 480987756 ns (0.11%), 48 samples
  [ 0] Channel.take
  [ 1] TickPerCell.waitTick
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-6 tid=161116]

--- 480951346 ns (0.11%), 48 samples
  [ 0] __futex_abstimed_wait_common
  [ 1] Unsafe.park
  [ 2] LockSupport.park
  [ 3] AbstractQueuedSynchronizer$ConditionNode.block
  [ 4] ForkJoinPool.unmanagedBlock
  [ 5] ForkJoinPool.managedBlock
  [ 6] AbstractQueuedSynchronizer$ConditionObject.await
  [ 7] LockedSingleValue.take
  [ 8] Channel.take
  [ 9] TickPerCell.waitTick
  [10] Cell.notifyLiveness
  [11] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-4 tid=161114]

--- 470944999 ns (0.11%), 47 samples
  [ 0] Channel.take
  [ 1] TickPerCell.waitTick
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-3 tid=161113]

--- 460963219 ns (0.10%), 46 samples
  [ 0] StreamOpFlag.fromCharacteristics
  [ 1] StreamSupport.stream
  [ 2] Collection.stream
  [ 3] Cell.calculateNextState
  [ 4] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-7 tid=161117]

--- 460939834 ns (0.10%), 46 samples
  [ 0] __futex_abstimed_wait_common
  [ 1] Unsafe.park
  [ 2] LockSupport.park
  [ 3] AbstractQueuedSynchronizer$ConditionNode.block
  [ 4] ForkJoinPool.unmanagedBlock
  [ 5] ForkJoinPool.managedBlock
  [ 6] AbstractQueuedSynchronizer$ConditionObject.await
  [ 7] LockedSingleValue.take
  [ 8] Channel.take
  [ 9] TickPerCell.waitTick
  [10] Cell.notifyLiveness
  [11] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-7 tid=161117]

--- 460911284 ns (0.10%), 46 samples
  [ 0] StreamOpFlag.fromCharacteristics
  [ 1] StreamSupport.stream
  [ 2] Collection.stream
  [ 3] Cell.calculateNextState
  [ 4] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-5 tid=161115]

--- 456897050 ns (0.10%), 45 samples
  [ 0] ___pthread_cond_wait
  [ 1] Unsafe.park
  [ 2] LockSupport.park
  [ 3] AbstractQueuedSynchronizer$ConditionNode.block
  [ 4] ForkJoinPool.unmanagedBlock
  [ 5] ForkJoinPool.managedBlock
  [ 6] AbstractQueuedSynchronizer$ConditionObject.await
  [ 7] LockedSingleValue.take
  [ 8] Channel.take
  [ 9] GameOfLife$$Lambda$62.0x0000000801037840.test
  [10] ChannelsGrid.lambda$forEachChannel$1
  [11] ChannelsGrid$$Lambda$66.0x0000000801033208.accept
  [12] Dimensions.forEachRowCol
  [13] ChannelsGrid.forEachChannel
  [14] GameOfLife.calculateFrame
  [15] GameOfLife.lambda$calculateFrameBlocking$4
  [16] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [17] ThreadPoolExecutor.runWorker
  [18] ThreadPoolExecutor$Worker.run
  [19] Thread.run
  [20] [Thread-9 tid=161119]

--- 441323464 ns (0.10%), 44 samples
  [ 0] __futex_abstimed_wait_common
  [ 1] Unsafe.park
  [ 2] LockSupport.park
  [ 3] AbstractQueuedSynchronizer$ConditionNode.block
  [ 4] ForkJoinPool.unmanagedBlock
  [ 5] ForkJoinPool.managedBlock
  [ 6] AbstractQueuedSynchronizer$ConditionObject.await
  [ 7] LockedSingleValue.take
  [ 8] Channel.take
  [ 9] TickPerCell.waitTick
  [10] Cell.notifyLiveness
  [11] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-8 tid=161118]

--- 441321849 ns (0.10%), 44 samples
  [ 0] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 1] Iterable.forEach
  [ 2] CellsGroup.run
  [ 3] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 4] ThreadPoolExecutor.runWorker
  [ 5] ThreadPoolExecutor$Worker.run
  [ 6] Thread.run
  [ 7] [Thread-8 tid=161118]

--- 430929416 ns (0.10%), 43 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LockedSingleValue.take
  [ 3] Channel.take
  [ 4] TickPerCell.waitTick
  [ 5] Cell.notifyLiveness
  [ 6] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-5 tid=161115]

--- 430880535 ns (0.10%), 43 samples
  [ 0] __futex_abstimed_wait_common
  [ 1] Unsafe.park
  [ 2] LockSupport.park
  [ 3] AbstractQueuedSynchronizer$ConditionNode.block
  [ 4] ForkJoinPool.unmanagedBlock
  [ 5] ForkJoinPool.managedBlock
  [ 6] AbstractQueuedSynchronizer$ConditionObject.await
  [ 7] LockedSingleValue.take
  [ 8] Channel.take
  [ 9] TickPerCell.waitTick
  [10] Cell.notifyLiveness
  [11] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-2 tid=161112]

--- 430808509 ns (0.10%), 43 samples
  [ 0] Channel.take
  [ 1] TickPerCell.waitTick
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-4 tid=161114]

--- 430774203 ns (0.10%), 43 samples
  [ 0] StreamOpFlag.fromCharacteristics
  [ 1] StreamSupport.stream
  [ 2] Collection.stream
  [ 3] Cell.calculateNextState
  [ 4] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-3 tid=161113]

--- 426380140 ns (0.10%), 42 samples
  [ 0] AbstractOwnableSynchronizer.getExclusiveOwnerThread
  [ 1] ReentrantLock$Sync.tryRelease
  [ 2] AbstractQueuedSynchronizer.release
  [ 3] ReentrantLock.unlock
  [ 4] LockedSingleValue.take
  [ 5] Channel.take
  [ 6] GameOfLife$$Lambda$62.0x0000000801037840.test
  [ 7] ChannelsGrid.lambda$forEachChannel$1
  [ 8] ChannelsGrid$$Lambda$66.0x0000000801033208.accept
  [ 9] Dimensions.forEachRowCol
  [10] ChannelsGrid.forEachChannel
  [11] GameOfLife.calculateFrame
  [12] GameOfLife.lambda$calculateFrameBlocking$4
  [13] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-9 tid=161119]

--- 420877454 ns (0.10%), 42 samples
  [ 0] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 1] Iterable.forEach
  [ 2] CellsGroup.run
  [ 3] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 4] ThreadPoolExecutor.runWorker
  [ 5] ThreadPoolExecutor$Worker.run
  [ 6] Thread.run
  [ 7] [Thread-2 tid=161112]

--- 420866757 ns (0.10%), 42 samples
  [ 0] __futex_abstimed_wait_common
  [ 1] Unsafe.park
  [ 2] LockSupport.park
  [ 3] AbstractQueuedSynchronizer$ConditionNode.block
  [ 4] ForkJoinPool.unmanagedBlock
  [ 5] ForkJoinPool.managedBlock
  [ 6] AbstractQueuedSynchronizer$ConditionObject.await
  [ 7] LockedSingleValue.take
  [ 8] Channel.take
  [ 9] TickPerCell.waitTick
  [10] Cell.notifyLiveness
  [11] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-6 tid=161116]

--- 420841522 ns (0.10%), 42 samples
  [ 0] AbstractOwnableSynchronizer.getExclusiveOwnerThread
  [ 1] ReentrantLock$Sync.tryRelease
  [ 2] AbstractQueuedSynchronizer.release
  [ 3] ReentrantLock.unlock
  [ 4] LockedSingleValue.take
  [ 5] Channel.take
  [ 6] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 7] ReferencePipeline$3$1.accept
  [ 8] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 9] AbstractPipeline.copyInto
  [10] AbstractPipeline.wrapAndCopyInto
  [11] ReduceOps$ReduceOp.evaluateSequential
  [12] AbstractPipeline.evaluate
  [13] IntPipeline.reduce
  [14] IntPipeline.sum
  [15] Cell.calculateNextState
  [16] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [17] Iterable.forEach
  [18] CellsGroup.run
  [19] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-7 tid=161117]

--- 420815618 ns (0.10%), 42 samples
  [ 0] __futex_abstimed_wait_common
  [ 1] Unsafe.park
  [ 2] LockSupport.park
  [ 3] AbstractQueuedSynchronizer$ConditionNode.block
  [ 4] ForkJoinPool.unmanagedBlock
  [ 5] ForkJoinPool.managedBlock
  [ 6] AbstractQueuedSynchronizer$ConditionObject.await
  [ 7] LockedSingleValue.take
  [ 8] Channel.take
  [ 9] TickPerCell.waitTick
  [10] Cell.notifyLiveness
  [11] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-3 tid=161113]

--- 406052541 ns (0.09%), 40 samples
  [ 0] ReentrantLock$NonfairSync.initialTryLock
  [ 1] ReentrantLock$Sync.lock
  [ 2] ReentrantLock.lock
  [ 3] LockedSingleValue.take
  [ 4] Channel.take
  [ 5] GameOfLife$$Lambda$62.0x0000000801037840.test
  [ 6] ChannelsGrid.lambda$forEachChannel$1
  [ 7] ChannelsGrid$$Lambda$66.0x0000000801033208.accept
  [ 8] Dimensions.forEachRowCol
  [ 9] ChannelsGrid.forEachChannel
  [10] GameOfLife.calculateFrame
  [11] GameOfLife.lambda$calculateFrameBlocking$4
  [12] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-9 tid=161119]

--- 405958456 ns (0.09%), 40 samples
  [ 0] syscall_enter_from_user_mode_[k]
  [ 1] do_syscall_64_[k]
  [ 2] entry_SYSCALL_64_after_hwframe_[k]
  [ 3] ___pthread_cond_signal
  [ 4] Unsafe.unpark
  [ 5] LockSupport.unpark
  [ 6] AbstractQueuedSynchronizer.signalNext
  [ 7] AbstractQueuedSynchronizer.release
  [ 8] ReentrantLock.unlock
  [ 9] LockedSingleValue.put
  [10] Channel.put
  [11] TickPerCell.lambda$tick$0
  [12] TickPerCell$$Lambda$50.0x0000000801035ec0.accept
  [13] ChannelsGrid.lambda$forEachChannel$0
  [14] ChannelsGrid$$Lambda$51.0x00000008010360d8.accept
  [15] Dimensions.forEachRowCol
  [16] ChannelsGrid.forEachChannel
  [17] TickPerCell.tick
  [18] GameOfLife.calculateFrame
  [19] GameOfLife.lambda$calculateFrameBlocking$4
  [20] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [21] ThreadPoolExecutor.runWorker
  [22] ThreadPoolExecutor$Worker.run
  [23] Thread.run
  [24] [Thread-9 tid=161119]

--- 390775910 ns (0.09%), 39 samples
  [ 0] ReentrantLock$NonfairSync.initialTryLock
  [ 1] ReentrantLock$Sync.lock
  [ 2] ReentrantLock.lock
  [ 3] LockedSingleValue.take
  [ 4] Channel.take
  [ 5] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 6] ReferencePipeline$3$1.accept
  [ 7] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 8] AbstractPipeline.copyInto
  [ 9] AbstractPipeline.wrapAndCopyInto
  [10] ReduceOps$ReduceOp.evaluateSequential
  [11] AbstractPipeline.evaluate
  [12] IntPipeline.reduce
  [13] IntPipeline.sum
  [14] Cell.calculateNextState
  [15] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [16] Iterable.forEach
  [17] CellsGroup.run
  [18] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [19] ThreadPoolExecutor.runWorker
  [20] ThreadPoolExecutor$Worker.run
  [21] Thread.run
  [22] [Thread-4 tid=161114]

--- 390740243 ns (0.09%), 39 samples
  [ 0] AbstractOwnableSynchronizer.getExclusiveOwnerThread
  [ 1] ReentrantLock$Sync.tryRelease
  [ 2] AbstractQueuedSynchronizer.release
  [ 3] ReentrantLock.unlock
  [ 4] LockedSingleValue.take
  [ 5] Channel.take
  [ 6] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 7] ReferencePipeline$3$1.accept
  [ 8] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 9] AbstractPipeline.copyInto
  [10] AbstractPipeline.wrapAndCopyInto
  [11] ReduceOps$ReduceOp.evaluateSequential
  [12] AbstractPipeline.evaluate
  [13] IntPipeline.reduce
  [14] IntPipeline.sum
  [15] Cell.calculateNextState
  [16] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [17] Iterable.forEach
  [18] CellsGroup.run
  [19] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-4 tid=161114]

--- 380767955 ns (0.09%), 38 samples
  [ 0] StreamOpFlag.fromCharacteristics
  [ 1] StreamSupport.stream
  [ 2] Collection.stream
  [ 3] Cell.calculateNextState
  [ 4] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-4 tid=161114]

--- 365617584 ns (0.08%), 36 samples
  [ 0] futex_q_lock_[k]
  [ 1] futex_wait_setup_[k]
  [ 2] futex_wait_[k]
  [ 3] do_futex_[k]
  [ 4] __x64_sys_futex_[k]
  [ 5] do_syscall_64_[k]
  [ 6] entry_SYSCALL_64_after_hwframe_[k]
  [ 7] __futex_abstimed_wait_common
  [ 8] Unsafe.park
  [ 9] LockSupport.park
  [10] AbstractQueuedSynchronizer$ConditionNode.block
  [11] ForkJoinPool.unmanagedBlock
  [12] ForkJoinPool.managedBlock
  [13] AbstractQueuedSynchronizer$ConditionObject.await
  [14] LockedSingleValue.take
  [15] Channel.take
  [16] GameOfLife$$Lambda$62.0x0000000801037840.test
  [17] ChannelsGrid.lambda$forEachChannel$1
  [18] ChannelsGrid$$Lambda$66.0x0000000801033208.accept
  [19] Dimensions.forEachRowCol
  [20] ChannelsGrid.forEachChannel
  [21] GameOfLife.calculateFrame
  [22] GameOfLife.lambda$calculateFrameBlocking$4
  [23] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [24] ThreadPoolExecutor.runWorker
  [25] ThreadPoolExecutor$Worker.run
  [26] Thread.run
  [27] [Thread-9 tid=161119]

--- 360769050 ns (0.08%), 36 samples
  [ 0] StreamOpFlag.fromCharacteristics
  [ 1] StreamSupport.stream
  [ 2] Collection.stream
  [ 3] Cell.calculateNextState
  [ 4] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-6 tid=161116]

--- 360723693 ns (0.08%), 36 samples
  [ 0] Sink$ChainedReference.<init>
  [ 1] ReferencePipeline$4$1.<init>
  [ 2] ReferencePipeline$4.opWrapSink
  [ 3] AbstractPipeline.wrapSink
  [ 4] AbstractPipeline.wrapAndCopyInto
  [ 5] ReduceOps$ReduceOp.evaluateSequential
  [ 6] AbstractPipeline.evaluate
  [ 7] IntPipeline.reduce
  [ 8] IntPipeline.sum
  [ 9] Cell.calculateNextState
  [10] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-6 tid=161116]

--- 351014662 ns (0.08%), 35 samples
  [ 0] StreamOpFlag.fromCharacteristics
  [ 1] StreamSupport.stream
  [ 2] Collection.stream
  [ 3] Cell.calculateNextState
  [ 4] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-8 tid=161118]

--- 350972119 ns (0.08%), 35 samples
  [ 0] Sink$ChainedReference.<init>
  [ 1] ReferencePipeline$4$1.<init>
  [ 2] ReferencePipeline$4.opWrapSink
  [ 3] AbstractPipeline.wrapSink
  [ 4] AbstractPipeline.wrapAndCopyInto
  [ 5] ReduceOps$ReduceOp.evaluateSequential
  [ 6] AbstractPipeline.evaluate
  [ 7] IntPipeline.reduce
  [ 8] IntPipeline.sum
  [ 9] Cell.calculateNextState
  [10] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-8 tid=161118]

--- 345124275 ns (0.08%), 34 samples
  [ 0] Dimensions.forEachRowCol
  [ 1] ChannelsGrid.forEachChannel
  [ 2] TickPerCell.tick
  [ 3] GameOfLife.calculateFrame
  [ 4] GameOfLife.lambda$calculateFrameBlocking$4
  [ 5] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [ 6] ThreadPoolExecutor.runWorker
  [ 7] ThreadPoolExecutor$Worker.run
  [ 8] Thread.run
  [ 9] [Thread-9 tid=161119]

--- 340895493 ns (0.08%), 34 samples
  [ 0] ReferencePipeline$3$1.accept
  [ 1] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 2] AbstractPipeline.copyInto
  [ 3] AbstractPipeline.wrapAndCopyInto
  [ 4] ReduceOps$ReduceOp.evaluateSequential
  [ 5] AbstractPipeline.evaluate
  [ 6] IntPipeline.reduce
  [ 7] IntPipeline.sum
  [ 8] Cell.calculateNextState
  [ 9] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-8 tid=161118]

--- 340743494 ns (0.08%), 34 samples
  [ 0] vtable stub
  [ 1] AbstractPipeline.wrapSink
  [ 2] AbstractPipeline.wrapAndCopyInto
  [ 3] ReduceOps$ReduceOp.evaluateSequential
  [ 4] AbstractPipeline.evaluate
  [ 5] IntPipeline.reduce
  [ 6] IntPipeline.sum
  [ 7] Cell.calculateNextState
  [ 8] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-2 tid=161112]

--- 340723466 ns (0.08%), 34 samples
  [ 0] vtable stub
  [ 1] AbstractPipeline.wrapSink
  [ 2] AbstractPipeline.wrapAndCopyInto
  [ 3] ReduceOps$ReduceOp.evaluateSequential
  [ 4] AbstractPipeline.evaluate
  [ 5] IntPipeline.reduce
  [ 6] IntPipeline.sum
  [ 7] Cell.calculateNextState
  [ 8] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-5 tid=161115]

--- 340683607 ns (0.08%), 34 samples
  [ 0] ReferencePipeline$3$1.accept
  [ 1] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 2] AbstractPipeline.copyInto
  [ 3] AbstractPipeline.wrapAndCopyInto
  [ 4] ReduceOps$ReduceOp.evaluateSequential
  [ 5] AbstractPipeline.evaluate
  [ 6] IntPipeline.reduce
  [ 7] IntPipeline.sum
  [ 8] Cell.calculateNextState
  [ 9] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-4 tid=161114]

--- 334917470 ns (0.08%), 33 samples
  [ 0] Parker::park(bool, long)
  [ 1] Unsafe_Park
  [ 2] Unsafe.park
  [ 3] LockSupport.park
  [ 4] AbstractQueuedSynchronizer$ConditionNode.block
  [ 5] ForkJoinPool.unmanagedBlock
  [ 6] ForkJoinPool.managedBlock
  [ 7] AbstractQueuedSynchronizer$ConditionObject.await
  [ 8] LockedSingleValue.take
  [ 9] Channel.take
  [10] GameOfLife$$Lambda$62.0x0000000801037840.test
  [11] ChannelsGrid.lambda$forEachChannel$1
  [12] ChannelsGrid$$Lambda$66.0x0000000801033208.accept
  [13] Dimensions.forEachRowCol
  [14] ChannelsGrid.forEachChannel
  [15] GameOfLife.calculateFrame
  [16] GameOfLife.lambda$calculateFrameBlocking$4
  [17] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-9 tid=161119]

--- 330677455 ns (0.08%), 33 samples
  [ 0] AbstractOwnableSynchronizer.getExclusiveOwnerThread
  [ 1] ReentrantLock$Sync.tryRelease
  [ 2] AbstractQueuedSynchronizer.release
  [ 3] ReentrantLock.unlock
  [ 4] LockedSingleValue.take
  [ 5] Channel.take
  [ 6] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 7] ReferencePipeline$3$1.accept
  [ 8] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 9] AbstractPipeline.copyInto
  [10] AbstractPipeline.wrapAndCopyInto
  [11] ReduceOps$ReduceOp.evaluateSequential
  [12] AbstractPipeline.evaluate
  [13] IntPipeline.reduce
  [14] IntPipeline.sum
  [15] Cell.calculateNextState
  [16] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [17] Iterable.forEach
  [18] CellsGroup.run
  [19] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-5 tid=161115]

--- 330675938 ns (0.08%), 33 samples
  [ 0] StreamOpFlag.fromCharacteristics
  [ 1] StreamSupport.stream
  [ 2] Collection.stream
  [ 3] Cell.calculateNextState
  [ 4] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-2 tid=161112]

--- 330655430 ns (0.08%), 33 samples
  [ 0] ReentrantLock$NonfairSync.initialTryLock
  [ 1] ReentrantLock$Sync.lock
  [ 2] ReentrantLock.lock
  [ 3] LockedSingleValue.take
  [ 4] Channel.take
  [ 5] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 6] ReferencePipeline$3$1.accept
  [ 7] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 8] AbstractPipeline.copyInto
  [ 9] AbstractPipeline.wrapAndCopyInto
  [10] ReduceOps$ReduceOp.evaluateSequential
  [11] AbstractPipeline.evaluate
  [12] IntPipeline.reduce
  [13] IntPipeline.sum
  [14] Cell.calculateNextState
  [15] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [16] Iterable.forEach
  [17] CellsGroup.run
  [18] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [19] ThreadPoolExecutor.runWorker
  [20] ThreadPoolExecutor$Worker.run
  [21] Thread.run
  [22] [Thread-6 tid=161116]

--- 330617171 ns (0.07%), 33 samples
  [ 0] ReferencePipeline$3$1.accept
  [ 1] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 2] AbstractPipeline.copyInto
  [ 3] AbstractPipeline.wrapAndCopyInto
  [ 4] ReduceOps$ReduceOp.evaluateSequential
  [ 5] AbstractPipeline.evaluate
  [ 6] IntPipeline.reduce
  [ 7] IntPipeline.sum
  [ 8] Cell.calculateNextState
  [ 9] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-3 tid=161113]

--- 320613858 ns (0.07%), 32 samples
  [ 0] ReferencePipeline$3$1.accept
  [ 1] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 2] AbstractPipeline.copyInto
  [ 3] AbstractPipeline.wrapAndCopyInto
  [ 4] ReduceOps$ReduceOp.evaluateSequential
  [ 5] AbstractPipeline.evaluate
  [ 6] IntPipeline.reduce
  [ 7] IntPipeline.sum
  [ 8] Cell.calculateNextState
  [ 9] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-6 tid=161116]

--- 320612377 ns (0.07%), 32 samples
  [ 0] Sink$ChainedReference.<init>
  [ 1] ReferencePipeline$4$1.<init>
  [ 2] ReferencePipeline$4.opWrapSink
  [ 3] AbstractPipeline.wrapSink
  [ 4] AbstractPipeline.wrapAndCopyInto
  [ 5] ReduceOps$ReduceOp.evaluateSequential
  [ 6] AbstractPipeline.evaluate
  [ 7] IntPipeline.reduce
  [ 8] IntPipeline.sum
  [ 9] Cell.calculateNextState
  [10] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-5 tid=161115]

--- 320611565 ns (0.07%), 32 samples
  [ 0] vtable stub
  [ 1] AbstractPipeline.wrapSink
  [ 2] AbstractPipeline.wrapAndCopyInto
  [ 3] ReduceOps$ReduceOp.evaluateSequential
  [ 4] AbstractPipeline.evaluate
  [ 5] IntPipeline.reduce
  [ 6] IntPipeline.sum
  [ 7] Cell.calculateNextState
  [ 8] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-3 tid=161113]

--- 314694874 ns (0.07%), 31 samples
  [ 0] ReentrantLock$Sync.lock
  [ 1] ReentrantLock.lock
  [ 2] LockedSingleValue.take
  [ 3] Channel.take
  [ 4] GameOfLife$$Lambda$62.0x0000000801037840.test
  [ 5] ChannelsGrid.lambda$forEachChannel$1
  [ 6] ChannelsGrid$$Lambda$66.0x0000000801033208.accept
  [ 7] Dimensions.forEachRowCol
  [ 8] ChannelsGrid.forEachChannel
  [ 9] GameOfLife.calculateFrame
  [10] GameOfLife.lambda$calculateFrameBlocking$4
  [11] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-9 tid=161119]

--- 310601346 ns (0.07%), 31 samples
  [ 0] vtable stub
  [ 1] AbstractPipeline.wrapSink
  [ 2] AbstractPipeline.wrapAndCopyInto
  [ 3] ReduceOps$ReduceOp.evaluateSequential
  [ 4] AbstractPipeline.evaluate
  [ 5] IntPipeline.reduce
  [ 6] IntPipeline.sum
  [ 7] Cell.calculateNextState
  [ 8] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-7 tid=161117]

--- 310587557 ns (0.07%), 31 samples
  [ 0] vtable stub
  [ 1] AbstractPipeline.wrapSink
  [ 2] AbstractPipeline.wrapAndCopyInto
  [ 3] ReduceOps$ReduceOp.evaluateSequential
  [ 4] AbstractPipeline.evaluate
  [ 5] IntPipeline.reduce
  [ 6] IntPipeline.sum
  [ 7] Cell.calculateNextState
  [ 8] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-4 tid=161114]

--- 304480825 ns (0.07%), 30 samples
  [ 0] Unsafe_Park
  [ 1] Unsafe.park
  [ 2] LockSupport.park
  [ 3] AbstractQueuedSynchronizer$ConditionNode.block
  [ 4] ForkJoinPool.unmanagedBlock
  [ 5] ForkJoinPool.managedBlock
  [ 6] AbstractQueuedSynchronizer$ConditionObject.await
  [ 7] LockedSingleValue.take
  [ 8] Channel.take
  [ 9] GameOfLife$$Lambda$62.0x0000000801037840.test
  [10] ChannelsGrid.lambda$forEachChannel$1
  [11] ChannelsGrid$$Lambda$66.0x0000000801033208.accept
  [12] Dimensions.forEachRowCol
  [13] ChannelsGrid.forEachChannel
  [14] GameOfLife.calculateFrame
  [15] GameOfLife.lambda$calculateFrameBlocking$4
  [16] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [17] ThreadPoolExecutor.runWorker
  [18] ThreadPoolExecutor$Worker.run
  [19] Thread.run
  [20] [Thread-9 tid=161119]

--- 300822159 ns (0.07%), 30 samples
  [ 0] ReentrantLock$NonfairSync.initialTryLock
  [ 1] ReentrantLock$Sync.lock
  [ 2] ReentrantLock.lock
  [ 3] LockedSingleValue.take
  [ 4] Channel.take
  [ 5] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 6] ReferencePipeline$3$1.accept
  [ 7] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 8] AbstractPipeline.copyInto
  [ 9] AbstractPipeline.wrapAndCopyInto
  [10] ReduceOps$ReduceOp.evaluateSequential
  [11] AbstractPipeline.evaluate
  [12] IntPipeline.reduce
  [13] IntPipeline.sum
  [14] Cell.calculateNextState
  [15] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [16] Iterable.forEach
  [17] CellsGroup.run
  [18] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [19] ThreadPoolExecutor.runWorker
  [20] ThreadPoolExecutor$Worker.run
  [21] Thread.run
  [22] [Thread-8 tid=161118]

--- 300622494 ns (0.07%), 30 samples
  [ 0] ReentrantLock$NonfairSync.initialTryLock
  [ 1] ReentrantLock$Sync.lock
  [ 2] ReentrantLock.lock
  [ 3] LockedSingleValue.take
  [ 4] Channel.take
  [ 5] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 6] ReferencePipeline$3$1.accept
  [ 7] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 8] AbstractPipeline.copyInto
  [ 9] AbstractPipeline.wrapAndCopyInto
  [10] ReduceOps$ReduceOp.evaluateSequential
  [11] AbstractPipeline.evaluate
  [12] IntPipeline.reduce
  [13] IntPipeline.sum
  [14] Cell.calculateNextState
  [15] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [16] Iterable.forEach
  [17] CellsGroup.run
  [18] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [19] ThreadPoolExecutor.runWorker
  [20] ThreadPoolExecutor$Worker.run
  [21] Thread.run
  [22] [Thread-7 tid=161117]

--- 300609723 ns (0.07%), 30 samples
  [ 0] ReferencePipeline$3$1.accept
  [ 1] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 2] AbstractPipeline.copyInto
  [ 3] AbstractPipeline.wrapAndCopyInto
  [ 4] ReduceOps$ReduceOp.evaluateSequential
  [ 5] AbstractPipeline.evaluate
  [ 6] IntPipeline.reduce
  [ 7] IntPipeline.sum
  [ 8] Cell.calculateNextState
  [ 9] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-5 tid=161115]

--- 290591434 ns (0.07%), 29 samples
  [ 0] ReferencePipeline$3$1.accept
  [ 1] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 2] AbstractPipeline.copyInto
  [ 3] AbstractPipeline.wrapAndCopyInto
  [ 4] ReduceOps$ReduceOp.evaluateSequential
  [ 5] AbstractPipeline.evaluate
  [ 6] IntPipeline.reduce
  [ 7] IntPipeline.sum
  [ 8] Cell.calculateNextState
  [ 9] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-7 tid=161117]

--- 290549044 ns (0.07%), 29 samples
  [ 0] ReentrantLock$Sync.lock
  [ 1] ReentrantLock.lock
  [ 2] LockedSingleValue.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-3 tid=161113]

--- 280581368 ns (0.06%), 28 samples
  [ 0] ReentrantLock$Sync.lock
  [ 1] ReentrantLock.lock
  [ 2] LockedSingleValue.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-6 tid=161116]

--- 280572861 ns (0.06%), 28 samples
  [ 0] ReferencePipeline$3$1.accept
  [ 1] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 2] AbstractPipeline.copyInto
  [ 3] AbstractPipeline.wrapAndCopyInto
  [ 4] ReduceOps$ReduceOp.evaluateSequential
  [ 5] AbstractPipeline.evaluate
  [ 6] IntPipeline.reduce
  [ 7] IntPipeline.sum
  [ 8] Cell.calculateNextState
  [ 9] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-2 tid=161112]

--- 274228666 ns (0.06%), 27 samples
  [ 0] futex_wait_[k]
  [ 1] do_futex_[k]
  [ 2] __x64_sys_futex_[k]
  [ 3] do_syscall_64_[k]
  [ 4] entry_SYSCALL_64_after_hwframe_[k]
  [ 5] __futex_abstimed_wait_common
  [ 6] Unsafe.park
  [ 7] LockSupport.park
  [ 8] AbstractQueuedSynchronizer$ConditionNode.block
  [ 9] ForkJoinPool.unmanagedBlock
  [10] ForkJoinPool.managedBlock
  [11] AbstractQueuedSynchronizer$ConditionObject.await
  [12] LockedSingleValue.take
  [13] Channel.take
  [14] GameOfLife$$Lambda$62.0x0000000801037840.test
  [15] ChannelsGrid.lambda$forEachChannel$1
  [16] ChannelsGrid$$Lambda$66.0x0000000801033208.accept
  [17] Dimensions.forEachRowCol
  [18] ChannelsGrid.forEachChannel
  [19] GameOfLife.calculateFrame
  [20] GameOfLife.lambda$calculateFrameBlocking$4
  [21] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [22] ThreadPoolExecutor.runWorker
  [23] ThreadPoolExecutor$Worker.run
  [24] Thread.run
  [25] [Thread-9 tid=161119]

--- 270559879 ns (0.06%), 27 samples
  [ 0] AbstractOwnableSynchronizer.getExclusiveOwnerThread
  [ 1] ReentrantLock$Sync.tryRelease
  [ 2] AbstractQueuedSynchronizer.release
  [ 3] ReentrantLock.unlock
  [ 4] LockedSingleValue.take
  [ 5] Channel.take
  [ 6] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 7] ReferencePipeline$3$1.accept
  [ 8] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 9] AbstractPipeline.copyInto
  [10] AbstractPipeline.wrapAndCopyInto
  [11] ReduceOps$ReduceOp.evaluateSequential
  [12] AbstractPipeline.evaluate
  [13] IntPipeline.reduce
  [14] IntPipeline.sum
  [15] Cell.calculateNextState
  [16] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [17] Iterable.forEach
  [18] CellsGroup.run
  [19] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-2 tid=161112]

--- 270538863 ns (0.06%), 27 samples
  [ 0] ReentrantLock$Sync.lock
  [ 1] ReentrantLock.lock
  [ 2] LockedSingleValue.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-7 tid=161117]

--- 270527436 ns (0.06%), 27 samples
  [ 0] ReferencePipeline$3$1.accept
  [ 1] [unknown_Java]
  [ 2] [Thread-4 tid=161114]

--- 270518201 ns (0.06%), 27 samples
  [ 0] ReentrantLock$NonfairSync.initialTryLock
  [ 1] ReentrantLock$Sync.lock
  [ 2] ReentrantLock.lock
  [ 3] LockedSingleValue.take
  [ 4] Channel.take
  [ 5] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 6] ReferencePipeline$3$1.accept
  [ 7] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 8] AbstractPipeline.copyInto
  [ 9] AbstractPipeline.wrapAndCopyInto
  [10] ReduceOps$ReduceOp.evaluateSequential
  [11] AbstractPipeline.evaluate
  [12] IntPipeline.reduce
  [13] IntPipeline.sum
  [14] Cell.calculateNextState
  [15] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [16] Iterable.forEach
  [17] CellsGroup.run
  [18] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [19] ThreadPoolExecutor.runWorker
  [20] ThreadPoolExecutor$Worker.run
  [21] Thread.run
  [22] [Thread-3 tid=161113]

--- 270491750 ns (0.06%), 27 samples
  [ 0] Sink$ChainedReference.<init>
  [ 1] ReferencePipeline$4$1.<init>
  [ 2] ReferencePipeline$4.opWrapSink
  [ 3] AbstractPipeline.wrapSink
  [ 4] AbstractPipeline.wrapAndCopyInto
  [ 5] ReduceOps$ReduceOp.evaluateSequential
  [ 6] AbstractPipeline.evaluate
  [ 7] IntPipeline.reduce
  [ 8] IntPipeline.sum
  [ 9] Cell.calculateNextState
  [10] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-3 tid=161113]

--- 264056859 ns (0.06%), 26 samples
  [ 0] AbstractQueuedSynchronizer$ConditionObject.canReacquire
  [ 1] AbstractQueuedSynchronizer$ConditionObject.await
  [ 2] LockedSingleValue.take
  [ 3] Channel.take
  [ 4] GameOfLife$$Lambda$62.0x0000000801037840.test
  [ 5] ChannelsGrid.lambda$forEachChannel$1
  [ 6] ChannelsGrid$$Lambda$66.0x0000000801033208.accept
  [ 7] Dimensions.forEachRowCol
  [ 8] ChannelsGrid.forEachChannel
  [ 9] GameOfLife.calculateFrame
  [10] GameOfLife.lambda$calculateFrameBlocking$4
  [11] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-9 tid=161119]

--- 264038484 ns (0.06%), 26 samples
  [ 0] Thread.interrupted
  [ 1] AbstractQueuedSynchronizer$ConditionObject.await
  [ 2] LockedSingleValue.take
  [ 3] Channel.take
  [ 4] GameOfLife$$Lambda$62.0x0000000801037840.test
  [ 5] ChannelsGrid.lambda$forEachChannel$1
  [ 6] ChannelsGrid$$Lambda$66.0x0000000801033208.accept
  [ 7] Dimensions.forEachRowCol
  [ 8] ChannelsGrid.forEachChannel
  [ 9] GameOfLife.calculateFrame
  [10] GameOfLife.lambda$calculateFrameBlocking$4
  [11] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-9 tid=161119]

--- 260526516 ns (0.06%), 26 samples
  [ 0] ReferencePipeline$3$1.accept
  [ 1] [unknown_Java]
  [ 2] [Thread-2 tid=161112]

--- 260525929 ns (0.06%), 26 samples
  [ 0] StreamOpFlag.fromCharacteristics
  [ 1] StreamSupport.stream
  [ 2] Collection.stream
  [ 3] Cell.calculateNextState
  [ 4] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-2 tid=161112]

--- 260509841 ns (0.06%), 26 samples
  [ 0] ReentrantLock$NonfairSync.initialTryLock
  [ 1] ReentrantLock$Sync.lock
  [ 2] ReentrantLock.lock
  [ 3] LockedSingleValue.take
  [ 4] Channel.take
  [ 5] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 6] ReferencePipeline$3$1.accept
  [ 7] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 8] AbstractPipeline.copyInto
  [ 9] AbstractPipeline.wrapAndCopyInto
  [10] ReduceOps$ReduceOp.evaluateSequential
  [11] AbstractPipeline.evaluate
  [12] IntPipeline.reduce
  [13] IntPipeline.sum
  [14] Cell.calculateNextState
  [15] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [16] Iterable.forEach
  [17] CellsGroup.run
  [18] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [19] ThreadPoolExecutor.runWorker
  [20] ThreadPoolExecutor$Worker.run
  [21] Thread.run
  [22] [Thread-5 tid=161115]

--- 260506217 ns (0.06%), 26 samples
  [ 0] ___pthread_cond_signal
  [ 1] Unsafe.unpark
  [ 2] LockSupport.unpark
  [ 3] AbstractQueuedSynchronizer.signalNext
  [ 4] AbstractQueuedSynchronizer.release
  [ 5] ReentrantLock.unlock
  [ 6] LockedSingleValue.put
  [ 7] Channel.put
  [ 8] Cell.calculateNextState
  [ 9] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-3 tid=161113]

--- 253804175 ns (0.06%), 25 samples
  [ 0] ChannelsGrid$$Lambda$66.0x0000000801033208.accept
  [ 1] [unknown_Java]
  [ 2] [Thread-9 tid=161119]

--- 250537217 ns (0.06%), 25 samples
  [ 0] ChannelsGrid.getChannel
  [ 1] TickPerCell.waitTick
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-5 tid=161115]

--- 250522363 ns (0.06%), 25 samples
  [ 0] ReentrantLock$NonfairSync.initialTryLock
  [ 1] ReentrantLock$Sync.lock
  [ 2] ReentrantLock.lock
  [ 3] LockedSingleValue.take
  [ 4] Channel.take
  [ 5] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 6] ReferencePipeline$3$1.accept
  [ 7] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 8] AbstractPipeline.copyInto
  [ 9] AbstractPipeline.wrapAndCopyInto
  [10] ReduceOps$ReduceOp.evaluateSequential
  [11] AbstractPipeline.evaluate
  [12] IntPipeline.reduce
  [13] IntPipeline.sum
  [14] Cell.calculateNextState
  [15] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [16] Iterable.forEach
  [17] CellsGroup.run
  [18] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [19] ThreadPoolExecutor.runWorker
  [20] ThreadPoolExecutor$Worker.run
  [21] Thread.run
  [22] [Thread-2 tid=161112]

--- 250504663 ns (0.06%), 25 samples
  [ 0] ReferencePipeline$3$1.accept
  [ 1] [unknown_Java]
  [ 2] [Thread-6 tid=161116]

--- 250499204 ns (0.06%), 25 samples
  [ 0] ReferencePipeline$3.opWrapSink
  [ 1] AbstractPipeline.wrapSink
  [ 2] AbstractPipeline.wrapAndCopyInto
  [ 3] ReduceOps$ReduceOp.evaluateSequential
  [ 4] AbstractPipeline.evaluate
  [ 5] IntPipeline.reduce
  [ 6] IntPipeline.sum
  [ 7] Cell.calculateNextState
  [ 8] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-4 tid=161114]

--- 250481827 ns (0.06%), 25 samples
  [ 0] AbstractOwnableSynchronizer.getExclusiveOwnerThread
  [ 1] ReentrantLock$Sync.tryRelease
  [ 2] AbstractQueuedSynchronizer.release
  [ 3] ReentrantLock.unlock
  [ 4] LockedSingleValue.take
  [ 5] Channel.take
  [ 6] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 7] ReferencePipeline$3$1.accept
  [ 8] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 9] AbstractPipeline.copyInto
  [10] AbstractPipeline.wrapAndCopyInto
  [11] ReduceOps$ReduceOp.evaluateSequential
  [12] AbstractPipeline.evaluate
  [13] IntPipeline.reduce
  [14] IntPipeline.sum
  [15] Cell.calculateNextState
  [16] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [17] Iterable.forEach
  [18] CellsGroup.run
  [19] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-3 tid=161113]

--- 250471257 ns (0.06%), 25 samples
  [ 0] AbstractQueuedSynchronizer.setState
  [ 1] ReentrantLock$Sync.tryRelease
  [ 2] AbstractQueuedSynchronizer.release
  [ 3] ReentrantLock.unlock
  [ 4] LockedSingleValue.take
  [ 5] Channel.take
  [ 6] Cell$$Lambda$59.0x00000008010371c8.apply
  [ 7] ReferencePipeline$3$1.accept
  [ 8] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 9] AbstractPipeline.copyInto
  [10] AbstractPipeline.wrapAndCopyInto
  [11] ReduceOps$ReduceOp.evaluateSequential
  [12] AbstractPipeline.evaluate
  [13] IntPipeline.reduce
  [14] IntPipeline.sum
  [15] Cell.calculateNextState
  [16] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [17] Iterable.forEach
  [18] CellsGroup.run
  [19] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-7 tid=161117]

--- 243588848 ns (0.06%), 24 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.tryAcquire
  [ 2] AbstractQueuedSynchronizer.acquire
  [ 3] AbstractQueuedSynchronizer$ConditionObject.await
  [ 4] LockedSingleValue.take
  [ 5] Channel.take
  [ 6] GameOfLife$$Lambda$62.0x0000000801037840.test
  [ 7] ChannelsGrid.lambda$forEachChannel$1
  [ 8] ChannelsGrid$$Lambda$66.0x0000000801033208.accept
  [ 9] Dimensions.forEachRowCol
  [10] ChannelsGrid.forEachChannel
  [11] GameOfLife.calculateFrame
  [12] GameOfLife.lambda$calculateFrameBlocking$4
  [13] GameOfLife$$Lambda$49.0x0000000801035cb0.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-9 tid=161119]

--- 240770573 ns (0.05%), 24 samples
  [ 0] ReferencePipeline$3$1.accept
  [ 1] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 2] AbstractPipeline.copyInto
  [ 3] AbstractPipeline.wrapAndCopyInto
  [ 4] ReduceOps$ReduceOp.evaluateSequential
  [ 5] AbstractPipeline.evaluate
  [ 6] IntPipeline.reduce
  [ 7] IntPipeline.sum
  [ 8] Cell.calculateNextState
  [ 9] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-8 tid=161118]

--- 240720122 ns (0.05%), 24 samples
  [ 0] ChannelsGrid.getChannel
  [ 1] TickPerCell.waitTick
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-8 tid=161118]

--- 240651043 ns (0.05%), 24 samples
  [ 0] AbstractQueuedSynchronizer.setState
  [ 1] ReentrantLock$Sync.tryRelease
  [ 2] AbstractQueuedSynchronizer.release
  [ 3] ReentrantLock.unlock
  [ 4] LockedSingleValue.put
  [ 5] Channel.put
  [ 6] Cell.lambda$notifyLiveness$0
  [ 7] Cell$$Lambda$52.0x00000008010362f8.accept
  [ 8] ArrayList.forEach
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$46.0x0000000801035478.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-8 tid=161118]

--- 240573910 ns (0.05%), 24 samples
  [ 0] futex_wake_[k]
  [ 1] do_futex_[k]
  [ 2] __x64_sys_futex_[k]
  [ 3] do_syscall_64_[k]
  [ 4] entry_SYSCALL_64_after_hwframe_[k]
  [ 5] ___pthread_cond_signal
  [ 6] Unsafe.unpark
  [ 7] LockSupport.unpark
  [ 8] AbstractQueuedSynchronizer.signalNext
  [ 9] AbstractQueuedSynchronizer.release
  [10] ReentrantLock.unlock
  [11] LockedSingleValue.put
  [12] Channel.put
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-2 tid=161112]

--- 240508431 ns (0.05%), 24 samples
  [ 0] StreamOpFlag.fromCharacteristics
  [ 1] StreamSupport.stream
  [ 2] Collection.stream
  [ 3] Cell.calculateNextState
  [ 4] CellsGroup$$Lambda$55.0x0000000801036958.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$45.0x0000000801035268.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-5 tid=161115]

          ns  percent  samples  top
  ----------  -------  -------  ---
 87919841445   19.94%     8762  AbstractQueuedSynchronizer.compareAndSetState
 65558599592   14.87%     6532  AbstractQueuedSynchronizer.release
 47785706006   10.84%     4768  Cell.lambda$notifyLiveness$0
 44303872386   10.05%     4421  ReduceOps$5ReducingSink.get
 16233872241    3.68%     1620  AbstractPipeline.<init>
 14902391509    3.38%     1485  LockedSingleValue.take
 13938332343    3.16%     1388  Channel.take
 13719837879    3.11%     1369  Cell$$Lambda$59.0x00000008010371c8.apply
  9920036666    2.25%      981  __futex_abstimed_wait_common
  7343935228    1.67%      725  _raw_spin_unlock_irqrestore_[k]
  6724244697    1.53%      671  ReferencePipeline$3$1.accept
  4670251646    1.06%      466  CellsGroup$$Lambda$46.0x0000000801035478.accept
  4575658741    1.04%      451  TickPerCell.lambda$tick$0
  4427640900    1.00%      438  syscall_enter_from_user_mode_[k]
  4399374122    1.00%      439  StreamOpFlag.fromCharacteristics
  4338444186    0.98%      432  AbstractOwnableSynchronizer.getExclusiveOwnerThread
  4228929694    0.96%      422  Sink$ChainedReference.<init>
  4079094020    0.93%      405  ___pthread_cond_signal
  4022257013    0.91%      401  LockedSingleValue.put
  3832723820    0.87%      382  AbstractQueuedSynchronizer$ConditionObject.signal
  3612415918    0.82%      357  __lll_lock_wake
  3283327731    0.74%      327  ReentrantLock$NonfairSync.initialTryLock
  3024465358    0.69%      301  ChannelsGrid.getChannel
  2755798695    0.63%      275  ReferencePipeline$4$1.accept
  2649097334    0.60%      264  AbstractQueuedSynchronizer.setState
  2394906665    0.54%      236  Dimensions.forEachRowCol
  2279657272    0.52%      227  ReentrantLock$Sync.lock
  2244229351    0.51%      223  AbstractQueuedSynchronizer.signalNext
  2114527821    0.48%      211  ReferencePipeline$3.opWrapSink
  2014173440    0.46%      201  vtable stub
  1823988324    0.41%      182  ReferencePipeline$4.opWrapSink
  1673692371    0.38%      167  Cell.notifyLiveness
  1533357307    0.35%      153  Sink$ChainedReference.begin
  1513366733    0.34%      151  ArrayList$SubList$1.next
  1453137660    0.33%      145  Iterable.forEach
  1213876935    0.28%      121  ReentrantLock$Sync.tryRelease
  1202434440    0.27%      120  ArrayList$ArrayListSpliterator.<init>
  1085139998    0.25%      108  ReentrantLock$Sync.isHeldExclusively
  1084518170    0.25%      108  ReentrantLock.lock
  1005069422    0.23%       99  ChannelsGrid$$Lambda$66.0x0000000801033208.accept
  1004574236    0.23%      100  AbstractQueuedSynchronizer.getState
   951983290    0.22%       95  ReduceOps$5ReducingSink.accept
   931859699    0.21%       93  Sink$ChainedReference.end
   930606829    0.21%       92  ___pthread_cond_wait
   861875905    0.20%       86  ArrayList.forEach
   852531530    0.19%       85  Channel.put
   840348245    0.19%       83  __condvar_dec_grefs
   821900695    0.19%       82  Boolean.booleanValue
   815793126    0.19%       81  futex_wake_[k]
   798211517    0.18%       79  AbstractQueuedSynchronizer.acquire
   776904961    0.18%       77  futex_hash_[k]
   751666787    0.17%       75  Cell$$Lambda$52.0x00000008010362f8.accept
   667245911    0.15%       66  Parker::park(bool, long)
   617757192    0.14%       61  futex_q_lock_[k]
   605917490    0.14%       60  Unsafe_Park
   576120337    0.13%       57  __x64_sys_futex_[k]
   571269938    0.13%       57  ArrayList$SubList$1.checkForComodification
   556539695    0.13%       55  __pthread_mutex_unlock_usercnt
   535798403    0.12%       53  futex_wait_[k]
   524532564    0.12%       52  _raw_spin_lock_[k]
   507329518    0.12%       50  ChannelsGrid$$Lambda$51.0x00000008010360d8.accept
   482987231    0.11%       48  __GI___pthread_mutex_lock
   462935495    0.11%       46  update_blocked_averages_[k]
   453801406    0.10%       45  AbstractQueuedSynchronizer$ConditionObject.doSignal
   444481388    0.10%       44  get_futex_key_[k]
   400828085    0.09%       40  CellsGroup$$Lambda$55.0x0000000801036958.accept
   395882798    0.09%       39  Integer.intValue
   394739943    0.09%       39  Thread.interrupted
   393724367    0.09%       39  futex_wake_mark_[k]
   384694816    0.09%       38  AbstractQueuedSynchronizer$ConditionObject.canReacquire
   380794267    0.09%       38  ReferencePipeline.map
   370790054    0.08%       37  StreamSupport.stream
   362942347    0.08%       36  Unsafe.park
   362279490    0.08%       36  Unsafe_Unpark
   352238113    0.08%       35  Unsafe.getAndBitwiseAndInt
   323084574    0.07%       32  pthread_mutex_trylock@@GLIBC_2.34
   313085495    0.07%       31  do_futex_[k]
   303671636    0.07%       30  __GI___pthread_disable_asynccancel
   302437234    0.07%       30  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<286822ul, G1BarrierSet>, (AccessInternal::BarrierType)3, 286822ul>::oop_access_barrier(oopDesc*, long)
   290573043    0.07%       29  DirectMethodHandle.allocateInstance
   281799731    0.06%       28  AbstractQueuedSynchronizer.enqueue
   271940870    0.06%       27  __schedule_[k]
   262194038    0.06%       26  __GI___pthread_getspecific
   261493837    0.06%       26  ThreadsListHandle::ThreadsListHandle(Thread*)
   253246434    0.06%       25  __get_user_nocheck_4_[k]
   243175275    0.06%       24  __pthread_mutex_cond_lock
   241920825    0.05%       24  AbstractQueuedSynchronizer$ConditionNode.isReleasable
   231961121    0.05%       23  finish_task_switch.isra.0_[k]
   223040431    0.05%       22  __condvar_confirm_wakeup
   220826393    0.05%       22  ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**)
   220480052    0.05%       22  StreamOpFlag.combineOpFlags
   220467171    0.05%       22  StreamOpFlag.getMask
   212614041    0.05%       21  schedule_[k]
   210438843    0.05%       21  Cell.calculateNextState
   202120514    0.05%       20  AbstractOwnableSynchronizer.setExclusiveOwnerThread
   201654086    0.05%       20  JavaThread::threadObj() const
   201351565    0.05%       20  wake_up_q_[k]
   201213937    0.05%       20  ThreadLocalStorage::is_initialized()
   191105675    0.04%       19  SafeThreadsListPtr::release_stable_list()
   182691184    0.04%       18  Invokers$Holder.linkToTargetMethod
   181278889    0.04%       18  __tls_get_addr
   180507219    0.04%       18  Object.<init>
   172516041    0.04%       17  TypeArrayKlass::multi_allocate(int, int*, JavaThread*)
   171016861    0.04%       17  AbstractQueuedSynchronizer.casTail
   170690147    0.04%       17  __futex_unqueue_[k]
   170359546    0.04%       17  AbstractPipeline.wrapSink
   160940531    0.04%       16  __get_user_8_[k]
   151510354    0.03%       15  __memset_avx2_unaligned_erms
   142180926    0.03%       14  GameOfLife$$Lambda$62.0x0000000801037840.test
   141923094    0.03%       14  futex_wait_queue_[k]
   141485116    0.03%       14  AbstractQueuedSynchronizer$ConditionObject.enableWait
   141477006    0.03%       14  _pthread_cleanup_pop@@GLIBC_2.34
   141403402    0.03%       14  preempt_count_add_[k]
   140537734    0.03%       14  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<548964ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 548964ul>::oop_access_barrier(void*)
   140445664    0.03%       14  ReentrantLock.unlock
   130573591    0.03%       13  java_lang_Thread::get_thread_status(oopDesc*)
   121053181    0.03%       12  java_lang_Thread::set_thread_status(oopDesc*, JavaThreadStatus)
   120578454    0.03%       12  Unsafe.unpark
   111229041    0.03%       11  JavaThread::is_interrupted(bool)
   111212721    0.03%       11  preempt_count_sub_[k]
   110898549    0.03%       11  __rseq_handle_notify_resume_[k]
   110240361    0.03%       11  ArrayList$ArrayListSpliterator.forEachRemaining
   101349457    0.02%       10  AbstractQueuedSynchronizer$ConditionObject.await
   100740173    0.02%       10  wake_q_add_safe_[k]
   100683410    0.02%       10  exit_to_user_mode_prepare_[k]
   100214362    0.02%       10  Collection.stream
    90492176    0.02%        9  LockSupport.unpark
    90348599    0.02%        9  __GI___pthread_mutex_unlock
    81207382    0.02%        8  GameOfLife.calculateFrame
    80842175    0.02%        8  futex_wait_setup_[k]
    80293304    0.02%        8  syscall_exit_to_user_mode_prepare_[k]
    70897991    0.02%        7  MemAllocator::allocate() const
    70645754    0.02%        7  JavaFrameAnchor::make_walkable()
    70615570    0.02%        7  Parker::unpark()
    70523665    0.02%        7  try_to_wake_up_[k]
    70181821    0.02%        7  IntPipeline.reduce
    70151493    0.02%        7  ReferencePipeline.mapToInt
    60911307    0.01%        6  MemAllocator::Allocation::notify_allocation_jvmti_sampler()
    60797190    0.01%        6  LockSupport.setCurrentBlocker
    60628503    0.01%        6  do_syscall_64_[k]
    60619549    0.01%        6  _raw_spin_unlock_[k]
    60556461    0.01%        6  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<544868ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 544868ul>::oop_access_barrier(void*)
    60481861    0.01%        6  java_lang_Thread::interrupted(oopDesc*)
    60383820    0.01%        6  ForkJoinPool.unmanagedBlock
    60143533    0.01%        6  Cell$$Lambda$63.0x0000000801037a78.applyAsInt
    50751566    0.01%        5  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<1335398ul, G1BarrierSet>, (AccessInternal::BarrierType)1, 1335398ul>::oop_access_barrier(oopDesc*, long, oopDesc*)
    50749345    0.01%        5  ChannelsGrid.lambda$forEachChannel$1
    50478816    0.01%        5  rebalance_domains_[k]
    50359253    0.01%        5  in_lock_functions_[k]
    50357256    0.01%        5  __GI___pthread_enable_asynccancel
    50350851    0.01%        5  ThreadsListHandle::~ThreadsListHandle()
    50146159    0.01%        5  TickPerCell.waitTick
    50095292    0.01%        5  ArrayList.elementAt
    40523983    0.01%        4  MemAllocator::Allocation::check_out_of_memory()
    40511658    0.01%        4  ObjArrayAllocator::initialize(HeapWordImpl**) const
    40504531    0.01%        4  plist_add_[k]
    40369124    0.01%        4  __futex_queue_[k]
    40216418    0.01%        4  pthread_getspecific@plt
    40120663    0.01%        4  FreeListAllocator::reset()
    30459669    0.01%        3  AbstractQueuedSynchronizer$Node.setPrevRelaxed
    30439426    0.01%        3  pthread_mutex_unlock@plt
    30344252    0.01%        3  __tls_get_addr@plt
    30337381    0.01%        3  AbstractQueuedSynchronizer$Node.clearStatus
    30321805    0.01%        3  plist_del_[k]
    30274508    0.01%        3  _raw_spin_unlock_irq_[k]
    30189615    0.01%        3  pthread_mutex_trylock@plt
    30113266    0.01%        3  G1CardSet::occupied() const
    30091879    0.01%        3  check_preemption_disabled_[k]
    30076868    0.01%        3  ReduceOps$6.<init>
    30054666    0.01%        3  G1ParScanThreadState::trim_queue_to_threshold(unsigned int)
    30046483    0.01%        3  CellsGroup.run
    20497825    0.00%        2  AtomicInteger.get
    20344561    0.00%        2  __list_add_valid_[k]
    20311968    0.00%        2  futex_get_value_locked_[k]
    20286632    0.00%        2  LinkedBlockingQueue.take
    20281771    0.00%        2  Klass::check_array_allocation_length(int, int, JavaThread*)
    20278156    0.00%        2  TickPerCell.tick
    20259319    0.00%        2  java_lang_Thread::thread(oopDesc*)
    20256164    0.00%        2  __clock_gettime
    20185224    0.00%        2  __put_user_nocheck_8_[k]
    20051489    0.00%        2  JfrObjectAllocationSample::send_event(Klass const*, unsigned long, bool, Thread*)
    20042306    0.00%        2  ThreadLocalStorage::thread()
    20033357    0.00%        2  G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*)
    20029062    0.00%        2  HeapRegionClaimer::claim_region(unsigned int)
    10332146    0.00%        1  syscall_exit_to_user_mode_[k]
    10301708    0.00%        1  VMError::is_error_reported()
    10282386    0.00%        1  mem_cgroup_handle_over_high_[k]
    10282277    0.00%        1  LinkedBlockingQueue.offer
    10230995    0.00%        1  AbstractQueuedSynchronizer$ConditionNode.block
    10181102    0.00%        1  LinkedBlockingQueue.enqueue
    10171374    0.00%        1  ThreadPoolExecutor$Worker.tryAcquire
    10170726    0.00%        1  LockSupport.park
    10168009    0.00%        1  __futex_abstimed_wait_cancelable64
    10166732    0.00%        1  ObjArrayKlass::multi_allocate(int, int*, JavaThread*)
    10153531    0.00%        1  ObjArrayKlass::allocate(int, JavaThread*)
    10148922    0.00%        1  ThreadPoolExecutor.runWorker
    10145147    0.00%        1  BinaryLinkClient.pushFrame
    10144251    0.00%        1  I2C/C2I adapters
    10142348    0.00%        1  LinkedBlockingQueue.dequeue
    10137185    0.00%        1  _multianewarray2_Java
